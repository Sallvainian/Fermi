name: macOS Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string

env:
  FLUTTER_VERSION: '3.24.0'
  XCODE_VERSION: '15.4'
  MACOS_APP_NAME: 'Fermi'
  BUNDLE_ID: 'com.academic-tools.fermi'

jobs:
  build-and-release:
    name: Build and Release macOS App
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install create-dmg
        run: |
          brew install create-dmg
          
      - name: Install dependencies
        run: |
          flutter pub get
          cd macos
          pod install
          cd ..
          
      - name: Set version number
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          
          # Update version in pubspec.yaml
          sed -i '' "s/^version: .*/version: $VERSION/" pubspec.yaml
          
      - name: Build macOS app
        run: |
          flutter build macos --release \
            --build-name=${{ env.APP_VERSION }} \
            --build-number=${{ github.run_number }}
            
      - name: Code signing (if certificates are available)
        if: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.MACOS_CERTIFICATE_PASSWORD != '' }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
        run: |
          # Import certificate
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p actions build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain
          
          # Sign the app
          codesign --force --deep --sign "$MACOS_IDENTITY" \
            "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app"
            
          # Verify signature
          codesign --verify --verbose \
            "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app"
            
      - name: Notarize app (if credentials are available)
        if: ${{ secrets.APPLE_ID != '' && secrets.APPLE_ID_PASSWORD != '' && secrets.APPLE_TEAM_ID != '' }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create a zip for notarization
          ditto -c -k --keepParent \
            "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app" \
            "${{ env.MACOS_APP_NAME }}.zip"
            
          # Submit for notarization
          xcrun notarytool submit "${{ env.MACOS_APP_NAME }}.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
            
          # Staple the notarization
          xcrun stapler staple \
            "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app"
            
      - name: Create DMG
        run: |
          # Create DMG with custom settings
          create-dmg \
            --volname "${{ env.MACOS_APP_NAME }}" \
            --volicon "macos/Runner/Assets.xcassets/AppIcon.appiconset/1024.png" \
            --window-pos 200 120 \
            --window-size 800 450 \
            --icon-size 100 \
            --icon "${{ env.MACOS_APP_NAME }}.app" 200 190 \
            --hide-extension "${{ env.MACOS_APP_NAME }}.app" \
            --app-drop-link 600 190 \
            --no-internet-enable \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            "build/macos/Build/Products/Release/"
            
      - name: Sign DMG (if certificates are available)
        if: ${{ secrets.MACOS_IDENTITY != '' }}
        env:
          MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
        run: |
          codesign --force --sign "$MACOS_IDENTITY" \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg"
            
      - name: Notarize DMG (if credentials are available)
        if: ${{ secrets.APPLE_ID != '' && secrets.APPLE_ID_PASSWORD != '' && secrets.APPLE_TEAM_ID != '' }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Submit DMG for notarization
          xcrun notarytool submit \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
            
          # Staple the notarization to DMG
          xcrun stapler staple \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg"
            
      - name: Generate checksums
        run: |
          shasum -a 256 "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg" > checksums.txt
          
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: |
            ${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg
            checksums.txt
            
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg
            checksums.txt
          generate_release_notes: true
          draft: false
          prerelease: false
          
      - name: Output summary
        run: |
          echo "## ðŸ“¦ macOS Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ env.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **DMG File**: ${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checksums" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat checksums.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY