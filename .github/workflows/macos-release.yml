name: macOS Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string

env:
  FLUTTER_VERSION: '3.32.0'
  XCODE_VERSION: '15.4'
  MACOS_APP_NAME: 'Fermi'
  BUNDLE_ID: 'com.academic-tools.fermi'

jobs:
  build:
    name: Build macOS App
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Install create-dmg
        run: |
          brew install create-dmg
          
      - name: Install dependencies
        run: |
          flutter pub get
          cd macos
          pod install
          cd ..
          
      - name: Set version number
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          
          # Update version in pubspec.yaml
          sed -i '' "s/^version: .*/version: $VERSION/" pubspec.yaml
          
      - name: Import Code Signing Certificate and Provisioning Profile
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
          MACOS_PROVISION_PROFILE_BASE64: ${{ secrets.MACOS_PROVISION_PROFILE_BASE64 }}
        run: |
          # Check if secrets are available
          if [ -z "$MACOS_CERTIFICATE" ] || [ -z "$MACOS_CERTIFICATE_PASSWORD" ]; then
            echo "Warning: Code signing certificates not available"
            echo "Build will proceed without code signing"
          else
            echo "Setting up code signing certificates..."
            # Create keychain
            security create-keychain -p actions build.keychain
            security list-keychains -d user -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p actions build.keychain
            security set-keychain-settings -lut 21600 build.keychain
            
            # Import certificate
            echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
            security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain
            echo "Certificate imported successfully"
            
            # Import provisioning profile
            if [ ! -z "$MACOS_PROVISION_PROFILE_BASE64" ]; then
              echo "Installing provisioning profile..."
              PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
              mkdir -p "$PROFILE_PATH"
              echo $MACOS_PROVISION_PROFILE_BASE64 | base64 --decode > profile.provisionprofile
              UUID=$(security cms -D -i profile.provisionprofile | plutil -extract UUID xml1 -o - - | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")
              cp profile.provisionprofile "$PROFILE_PATH/$UUID.provisionprofile"
              echo "Provisioning profile installed: $UUID"
              
              # Also copy for Xcode to find
              cp profile.provisionprofile "$PROFILE_PATH/Mac_App_Development_com_academic_tools_fermi.provisionprofile"
            else
              echo "Warning: Provisioning profile not available, relying on automatic signing"
            fi
          fi
          
      - name: Build macOS app
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM_MAC }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_FUNCTIONS_REGION: ${{ secrets.FIREBASE_FUNCTIONS_REGION }}
          MACOS_PROVISION_PROFILE_BASE64: ${{ secrets.MACOS_PROVISION_PROFILE_BASE64 }}
        run: |
          # Extract provisioning profile UUID and Team ID if available
          if [ ! -z "$MACOS_PROVISION_PROFILE_BASE64" ]; then
            echo $MACOS_PROVISION_PROFILE_BASE64 | base64 --decode > temp_profile.provisionprofile
            
            # Extract UUID
            PROVISIONING_PROFILE_UUID=$(security cms -D -i temp_profile.provisionprofile | plutil -extract UUID xml1 -o - - | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")
            echo "Using provisioning profile UUID: $PROVISIONING_PROFILE_UUID"
            
            # Extract Team ID from the provisioning profile to ensure it matches
            PROFILE_TEAM_ID=$(security cms -D -i temp_profile.provisionprofile | plutil -extract TeamIdentifier.0 xml1 -o - - | sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")
            echo "Provisioning profile belongs to team: $PROFILE_TEAM_ID"
            
            # Use the team ID from the profile to ensure they match
            export DEVELOPMENT_TEAM="$PROFILE_TEAM_ID"
            echo "Using team ID from provisioning profile: $DEVELOPMENT_TEAM"
            
            rm temp_profile.provisionprofile
            
            # Export for Xcode to use
            export PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_UUID"
          else
            # Use the team from the secret or environment if no profile provided
            export DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM:-${{ secrets.DEVELOPMENT_TEAM_MAC }}}"
          fi
          
          # Build with explicit xcodebuild settings for provisioning
          if [ ! -z "$PROVISIONING_PROFILE_UUID" ]; then
            echo "Building with manual signing using profile UUID: $PROVISIONING_PROFILE_UUID"
            echo "Using team ID: $DEVELOPMENT_TEAM"
            
            # First run flutter build to generate necessary Flutter artifacts
            flutter build macos --config-only
            
            # Build with xcodebuild using automatic signing
            # This allows Xcode to automatically select the correct provisioning profile
            # for the Runner target while not forcing it on Pod dependencies
            cd macos
            xcodebuild -workspace Runner.xcworkspace \
              -scheme Runner \
              -configuration Release \
              -derivedDataPath ../build/macos \
              DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
              CODE_SIGN_STYLE="Automatic" \
              PRODUCT_BUNDLE_IDENTIFIER="com.academic-tools.fermi" \
              FLUTTER_BUILD_NAME="${{ env.APP_VERSION }}" \
              FLUTTER_BUILD_NUMBER="${{ github.run_number }}"
            cd ..
          else
            flutter build macos --release \
              --build-name=${{ env.APP_VERSION }} \
              --build-number=${{ github.run_number }} \
              --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
              --dart-define=FIREBASE_FUNCTIONS_REGION=${{ secrets.FIREBASE_FUNCTIONS_REGION }} \
              --dart-define=DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM
          fi
            
      - name: Sign the app
        env:
          MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
        run: |
          if [ -z "$MACOS_IDENTITY" ]; then
            echo "Skipping app signing - identity not available"
          else
            echo "Signing the app..."
            codesign --force --deep --sign "$MACOS_IDENTITY" \
              "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app"
            
            # Verify signature
            codesign --verify --verbose \
              "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app"
          fi
            
      - name: Notarize app (if credentials are available)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Check if notarization credentials are available
          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_ID_PASSWORD" ] || [ -z "$APPLE_TEAM_ID" ]; then
            echo "Skipping notarization - credentials not available"
            exit 0
          fi
          # Create a zip for notarization
          ditto -c -k --keepParent \
            "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app" \
            "${{ env.MACOS_APP_NAME }}.zip"
            
          # Submit for notarization
          xcrun notarytool submit "${{ env.MACOS_APP_NAME }}.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
            
          # Staple the notarization
          xcrun stapler staple \
            "build/macos/Build/Products/Release/${{ env.MACOS_APP_NAME }}.app"
            
      - name: Create DMG
        run: |
          # Create DMG with custom settings
          create-dmg \
            --volname "${{ env.MACOS_APP_NAME }}" \
            --volicon "macos/Runner/Assets.xcassets/AppIcon.appiconset/1024.png" \
            --window-pos 200 120 \
            --window-size 800 450 \
            --icon-size 100 \
            --icon "${{ env.MACOS_APP_NAME }}.app" 200 190 \
            --hide-extension "${{ env.MACOS_APP_NAME }}.app" \
            --app-drop-link 600 190 \
            --no-internet-enable \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            "build/macos/Build/Products/Release/"
            
      - name: Sign DMG (if certificates are available)
        env:
          MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
        run: |
          # Check if signing identity is available
          if [ -z "$MACOS_IDENTITY" ]; then
            echo "Skipping DMG signing - identity not available"
            exit 0
          fi
          codesign --force --sign "$MACOS_IDENTITY" \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg"
            
      - name: Notarize DMG (if credentials are available)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Check if notarization credentials are available
          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_ID_PASSWORD" ] || [ -z "$APPLE_TEAM_ID" ]; then
            echo "Skipping DMG notarization - credentials not available"
            exit 0
          fi
          # Submit DMG for notarization
          xcrun notarytool submit \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
            
          # Staple the notarization to DMG
          xcrun stapler staple \
            "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg"
            
      - name: Generate checksums
        run: |
          shasum -a 256 "${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg" > checksums.txt
          
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: |
            ${{ env.MACOS_APP_NAME }}-${{ env.APP_VERSION }}.dmg
            checksums.txt

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-dmg

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            TAG="${{ github.ref_name }}"
            VERSION=${TAG#v}
            VERSION=${VERSION#macos-v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('macos-v{0}', steps.get_version.outputs.version) || github.ref_name }}
          name: Fermi macOS v${{ steps.get_version.outputs.version }}
          files: |
            Fermi-${{ steps.get_version.outputs.version }}.dmg
            checksums.txt
          body: |
            ## Fermi Education Platform - macOS Release v${{ steps.get_version.outputs.version }}
            
            ### 📦 Installation
            1. Download the DMG file
            2. Open the DMG
            3. Drag Fermi to your Applications folder
            
            ### System Requirements
            - macOS 11.0 Big Sur or later
            - Apple Silicon (M1/M2/M3) or Intel processor
            
            ### Features
            - ✅ Native macOS application
            - ✅ Google & Apple Sign-In
            - ✅ Real-time messaging
            - ✅ Offline support
          draft: false
          prerelease: false
      - name: Add Build Summary
        run: |
          echo "## 📦 macOS Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **DMG File**: Fermi-${{ steps.get_version.outputs.version }}.dmg" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checksums" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat checksums.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY