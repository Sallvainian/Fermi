name: iOS Deploy to TestFlight

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  FLUTTER_VERSION: '3.32.7'
  XCODE_VERSION: '15.2'
  IOS_DEPLOYMENT_TARGET: '16.0'

jobs:
  deploy-ios:
    name: Deploy to TestFlight
    runs-on: macos-latest
    timeout-minutes: 45
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      
      - name: Install Provisioning Profile
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      - name: Bump version
        id: version
        run: |
          # Read current version
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "Current version: $CURRENT_VERSION"
          
          # Split version and build number
          VERSION_NAME=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          
          # Bump version based on input
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NAME"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.version_bump }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION_NAME="${MAJOR}.${MINOR}.${PATCH}"
          NEW_BUILD_NUMBER=${{ github.run_number }}
          NEW_VERSION="${NEW_VERSION_NAME}+${NEW_BUILD_NUMBER}"
          
          # Update pubspec.yaml
          sed -i.bak "s/version: .*/version: $NEW_VERSION/" pubspec.yaml
          rm pubspec.yaml.bak
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION_NAME=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "NEW_BUILD_NUMBER=$NEW_BUILD_NUMBER" >> $GITHUB_OUTPUT
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Pod install
        working-directory: ios
        run: |
          pod cache clean --all
          pod repo update
          pod install --repo-update
      
      - name: Build iOS app
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          flutter build ios --release \
            --build-name=${{ steps.version.outputs.NEW_VERSION_NAME }} \
            --build-number=${{ steps.version.outputs.NEW_BUILD_NUMBER }} \
            --dart-define=ENVIRONMENT=${{ github.event.inputs.environment }}
      
      - name: Archive iOS app
        working-directory: ios
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          PROVISIONING_PROFILE_UUID: ${{ secrets.PROVISIONING_PROFILE_UUID }}
        run: |
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -allowProvisioningUpdates \
            -destination 'generic/platform=iOS' \
            archive \
            DEVELOPMENT_TEAM=$TEAM_ID \
            PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID \
            PROVISIONING_PROFILE_SPECIFIER=$PROVISIONING_PROFILE_UUID
      
      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportOptionsPlist $EXPORT_OPTS_PATH \
            -exportPath $RUNNER_TEMP/export \
            -allowProvisioningUpdates
      
      - name: Upload to TestFlight
        env:
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
          APPSTORE_API_KEY: ${{ secrets.APPSTORE_API_KEY }}
        run: |
          # Create API key file
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n "$APPSTORE_API_KEY" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8
          
          # Upload to TestFlight
          xcrun altool --upload-app \
            --type ios \
            --file $RUNNER_TEMP/export/Runner.ipa \
            --apiKey $APPSTORE_API_KEY_ID \
            --apiIssuer $APPSTORE_API_ISSUER_ID
      
      - name: Commit version bump
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pubspec.yaml
          git commit -m "chore: bump version to ${{ steps.version.outputs.NEW_VERSION }} [skip ci]"
          git push
      
      - name: Create Release Tag
        if: success() && github.event.inputs.environment == 'production'
        run: |
          git tag -a "v${{ steps.version.outputs.NEW_VERSION_NAME }}" -m "Release version ${{ steps.version.outputs.NEW_VERSION_NAME }}"
          git push origin "v${{ steps.version.outputs.NEW_VERSION_NAME }}"
      
      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision