name: macOS Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: macos-14
    env:
      APP_NAME: Fermi
      BUNDLE_ID: com.academic-tools.fermi
      APP_PATH: build/macos/Build/Products/Release/teacher_dashboard_flutter.app  # Flutter app name from pubspec
      ENTITLEMENTS_PATH: macos/Runner/Release.entitlements  # Adjust if your project has a custom path

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable  # Uses latest stable; change to '3.22.0' if needed

      - name: Install dependencies
        run: flutter pub get

      - name: Set version
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d+ -f1)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Disable automatic code signing
        run: |
          # Modify the Xcode project to disable code signing
          cd macos
          sed -i '' 's/CODE_SIGN_IDENTITY = .*/CODE_SIGN_IDENTITY = "";/' Runner.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGNING_REQUIRED = YES/CODE_SIGNING_REQUIRED = NO/' Runner.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGNING_ALLOWED = YES/CODE_SIGNING_ALLOWED = NO/' Runner.xcodeproj/project.pbxproj
          sed -i '' 's/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = "";/' Runner.xcodeproj/project.pbxproj
          
          # Also disable in xcconfig if present
          if [ -f "Runner/Configs/Release.xcconfig" ]; then
            echo "CODE_SIGN_IDENTITY=" >> Runner/Configs/Release.xcconfig
            echo "CODE_SIGNING_REQUIRED=NO" >> Runner/Configs/Release.xcconfig
            echo "CODE_SIGNING_ALLOWED=NO" >> Runner/Configs/Release.xcconfig
          fi
          cd ..
          
      - name: Build Flutter macOS app
        run: |
          # Build the app without code signing
          flutter build macos --release \
            --dart-define=FLUTTER_BUILD_MODE=release \
            --dart-define=FLUTTER_BUILD_NAME=${{ steps.set_version.outputs.version }}

      - name: Verify build output
        run: |
          echo "Checking for built app..."
          ls -la build/macos/Build/Products/Release/
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: App bundle not found at $APP_PATH"
            exit 1
          fi
          echo "App bundle found at $APP_PATH"

      - name: Create temporary keychain
        run: |
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          echo "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" | base64 --decode > app_cert.p12
          security import app_cert.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          echo "${{ secrets.MACOS_PKG_CERTIFICATE_BASE64 }}" | base64 --decode > pkg_cert.p12
          security import pkg_cert.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/productsign
          # Import provisioning profile if needed (optional for Developer ID)
          if [ ! -z "${{ secrets.MACOS_PROVISIONING_PROFILE_BASE64 }}" ]; then
            echo "${{ secrets.MACOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.provisionprofile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp profile.provisionprofile ~/Library/MobileDevice/Provisioning\ Profiles/
          fi
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      - name: Create entitlements.plist (Flutter Developer ID defaults)
        run: |
          cat << EOF > $ENTITLEMENTS_PATH
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <!-- Add app-specific entitlements here, e.g., network access -->
          </dict>
          </plist>
          EOF

      - name: Sign app bundle
        run: |
          codesign --deep --force --verbose --timestamp --options runtime --entitlements $ENTITLEMENTS_PATH --sign "${{ secrets.MACOS_APP_IDENTITY }}" "$APP_PATH"

      - name: Create and sign PKG
        id: create_pkg
        run: |
          PKG_NAME="${APP_NAME}-${{ steps.set_version.outputs.version }}.pkg"
          productbuild --component "$APP_PATH" /Applications --sign "${{ secrets.MACOS_PKG_IDENTITY }}" --version "${{ steps.set_version.outputs.version }}" "$PKG_NAME"
          echo "pkg_name=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "Created PKG: $PKG_NAME"
          # For more control, add --distribution distribution.xml and resources

      - name: Notarize PKG
        id: notarize_pkg
        run: |
          SUBMISSION_ID=$(xcrun notarytool submit "${APP_NAME}-${{ steps.set_version.outputs.version }}.pkg" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --output-format json | jq -r '.id')
          if [ -z "$SUBMISSION_ID" ]; then exit 1; fi
          echo "submission_id=$SUBMISSION_ID" >> $GITHUB_OUTPUT
          # Wait with --wait; fallback to polling if needed
          xcrun notarytool wait "$SUBMISSION_ID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" || {
            for i in {1..15}; do
              STATUS=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --output-format json | jq -r '.status')
              if [ "$STATUS" = "Accepted" ]; then break; fi
              if [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then exit 1; fi
              sleep 120
            done
          }

      - name: Staple PKG
        run: xcrun stapler staple "${APP_NAME}-${{ steps.set_version.outputs.version }}.pkg"

      - name: Create DMG
        id: create_dmg
        run: |
          # Create a directory for DMG contents
          mkdir -p dmg_contents
          
          # Copy the signed app bundle to DMG contents
          cp -R "$APP_PATH" dmg_contents/
          
          # Create Applications symlink
          ln -s /Applications dmg_contents/Applications
          
          # Create DMG
          DMG_NAME="${APP_NAME}-${{ steps.set_version.outputs.version }}.dmg"
          hdiutil create -volname "${APP_NAME}" \
            -srcfolder dmg_contents \
            -ov -format UDZO \
            "$DMG_NAME"
          
          echo "dmg_name=$DMG_NAME" >> $GITHUB_OUTPUT
          echo "Created DMG: $DMG_NAME"

      - name: List files before upload
        run: |
          echo "Files in current directory:"
          ls -la *.pkg *.dmg || echo "No PKG/DMG files found"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-releases
          path: |
            Fermi-*.pkg
            Fermi-*.dmg
          if-no-files-found: error

      - name: Cleanup keychain
        if: always()  # Run even on failure for security
        run: |
          security delete-keychain build.keychain || true
          rm -f app_cert.p12 pkg_cert.p12 profile.provisionprofile || true

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-releases
          path: ./
          
      - name: List downloaded files
        run: |
          echo "Files downloaded from artifact:"
          ls -la
          echo "PKG files:"
          ls -la *.pkg || echo "No PKG files found"
          echo "DMG files:"
          ls -la *.dmg || echo "No DMG files found"
        
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            TAG="${{ github.ref_name }}"
            VERSION=${TAG#v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', steps.get_version.outputs.version) || github.ref_name }}
          name: Fermi macOS v${{ steps.get_version.outputs.version }}
          body: |
            ## Fermi Education Platform - macOS Release v${{ steps.get_version.outputs.version }}
            
            ### 📦 Installation
            - **PKG**: Download and double-click to install
            - **DMG**: Download, mount, and drag to Applications folder
            
            ### System Requirements
            - macOS 11.0 (Big Sur) or later
            - Apple Silicon (M1/M2/M3) or Intel processor
            
            ### Features
            - ✅ Native macOS app
            - ✅ Signed and notarized by Apple
            - ✅ Full Firebase integration
            - ✅ Real-time messaging
            - ✅ Offline support
          files: |
            Fermi-*.pkg
            Fermi-*.dmg
          draft: false
          prerelease: false
          fail_on_unmatched_files: true