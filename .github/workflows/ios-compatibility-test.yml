name: iOS Xcode Compatibility Test

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC
  pull_request:
    paths:
      - '.github/workflows/ios-compatibility-test.yml'

jobs:
  test-xcode-versions:
    name: Xcode ${{ matrix.xcode }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS 12 runners
          - os: macos-12
            xcode: '14.0.1'
            flutter: '3.24.0'
          - os: macos-12
            xcode: '14.2'
            flutter: '3.24.0'
            
          # macOS 13 runners  
          - os: macos-13
            xcode: '14.3.1'
            flutter: '3.24.0'
          - os: macos-13
            xcode: '15.0.1'
            flutter: '3.24.0'
          - os: macos-13
            xcode: '15.2'
            flutter: '3.24.0'
            
          # Latest macOS runner
          - os: macos-latest
            xcode: '15.2'
            flutter: '3.24.0'
          - os: macos-latest
            xcode: 'latest'
            flutter: '3.24.0'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Select Xcode
        if: matrix.xcode != 'latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}
          
      - name: Environment information
        id: env_info
        run: |
          echo "### Testing Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Runner OS | ${{ matrix.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS | $(sw_vers -productVersion) |" >> $GITHUB_STEP_SUMMARY
          echo "| Xcode | $(xcodebuild -version | head -1) |" >> $GITHUB_STEP_SUMMARY
          echo "| Swift | $(swift --version | head -1 | cut -d' ' -f4) |" >> $GITHUB_STEP_SUMMARY
          echo "| Flutter | ${{ matrix.flutter }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Store versions for later
          echo "XCODE_ACTUAL=$(xcodebuild -version | head -1)" >> $GITHUB_OUTPUT
          echo "SWIFT_VERSION=$(swift --version | head -1)" >> $GITHUB_OUTPUT
          echo "MACOS_VERSION=$(sw_vers -productVersion)" >> $GITHUB_OUTPUT
          
          # Show available SDKs and simulators
          xcodebuild -showsdks
          xcrun simctl list devices available
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter }}
          channel: 'stable'
          cache: true
      
      - name: Flutter doctor
        run: flutter doctor -v
      
      - name: Get dependencies
        run: flutter pub get
        
      - name: Check flutter_webrtc patch availability
        run: |
          if [ -f scripts/patch_flutter_webrtc.sh ]; then
            chmod +x scripts/patch_flutter_webrtc.sh
            echo "‚úÖ flutter_webrtc patch script is available" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è flutter_webrtc patch script not found" >> $GITHUB_STEP_SUMMARY
          fi
        
      - name: Install CocoaPods
        run: |
          gem install cocoapods -v 1.15.2
          pod --version
          
      - name: Pod install
        id: pod_install
        working-directory: ios
        run: |
          pod install --repo-update
        continue-on-error: true
        
      - name: Attempt iOS build (Debug Simulator)
        id: build_debug
        run: |
          flutter build ios --debug --simulator --no-codesign
        continue-on-error: true
        
      - name: Attempt iOS build (Release)
        id: build_release
        if: steps.build_debug.outcome == 'success'
        run: |
          flutter build ios --release --no-codesign
        continue-on-error: true
        
      - name: Check specific compatibility issues
        if: always()
        run: |
          echo "### Compatibility Checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for iOS 17 API issues
          if grep -r "AVCaptureDeviceTypeContinuityCamera\|AVCaptureDeviceTypeExternal" ios/Pods 2>/dev/null; then
            echo "‚ö†Ô∏è **iOS 17+ APIs detected** - May need conditional compilation" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **No iOS 17+ API issues detected**" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for Firebase compatibility
          if [ -f ios/Podfile.lock ]; then
            FIREBASE_VERSION=$(grep -A1 "Firebase/CoreOnly" ios/Podfile.lock | tail -1 | awk '{print $2}' | tr -d '()')
            echo "üì¶ **Firebase Version:** $FIREBASE_VERSION" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check minimum iOS version
          MIN_IOS=$(grep "platform :ios" ios/Podfile | grep -o "[0-9]*\.[0-9]*" || echo "Not found")
          echo "üì± **Minimum iOS:** $MIN_IOS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        
      - name: Create compatibility report
        if: always()
        run: |
          # Create detailed report
          cat > compatibility-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": {
              "runner_os": "${{ matrix.os }}",
              "macos_version": "${{ steps.env_info.outputs.MACOS_VERSION }}",
              "xcode_requested": "${{ matrix.xcode }}",
              "xcode_actual": "${{ steps.env_info.outputs.XCODE_ACTUAL }}",
              "swift_version": "${{ steps.env_info.outputs.SWIFT_VERSION }}",
              "flutter_version": "${{ matrix.flutter }}"
            },
            "results": {
              "pod_install": "${{ steps.pod_install.outcome }}",
              "build_debug": "${{ steps.build_debug.outcome }}",
              "build_release": "${{ steps.build_release.outcome }}",
              "overall": "${{ steps.build_release.outcome == 'success' && 'PASS' || (steps.build_debug.outcome == 'success' && 'PARTIAL') || 'FAIL' }}"
            }
          }
          EOF
          
          # Update summary
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pod Install | ${{ steps.pod_install.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Debug Build | ${{ steps.build_debug.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release Build | ${{ steps.build_release.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall result
          if [ "${{ steps.build_release.outcome }}" == "success" ]; then
            echo "### ‚úÖ FULLY COMPATIBLE" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.build_debug.outcome }}" == "success" ]; then
            echo "### ‚ö†Ô∏è PARTIALLY COMPATIBLE (Debug only)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå NOT COMPATIBLE" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compatibility-xcode-${{ matrix.xcode }}-macos-${{ matrix.os }}
          path: compatibility-report.json
          retention-days: 30
          
      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: failed-build-logs-xcode-${{ matrix.xcode }}
          path: |
            **/*.log
            ios/Pods/
            !ios/Pods/**/*.h
            !ios/Pods/**/*.m
            !ios/Pods/**/*.swift
          retention-days: 7
          
  compatibility-summary:
    name: Compatibility Summary
    runs-on: ubuntu-latest
    needs: test-xcode-versions
    if: always()
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: reports
          
      - name: Generate compatibility matrix
        run: |
          echo "# iOS Build Compatibility Matrix" > compatibility-matrix.md
          echo "" >> compatibility-matrix.md
          echo "Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> compatibility-matrix.md
          echo "" >> compatibility-matrix.md
          echo "| macOS | Xcode | Pod Install | Debug Build | Release Build | Status |" >> compatibility-matrix.md
          echo "|-------|-------|-------------|-------------|---------------|--------|" >> compatibility-matrix.md
          
          # Process all compatibility reports
          for report in reports/compatibility-*/compatibility-report.json; do
            if [ -f "$report" ]; then
              MACOS=$(jq -r '.environment.runner_os' "$report")
              XCODE=$(jq -r '.environment.xcode_requested' "$report")
              POD=$(jq -r '.results.pod_install' "$report")
              DEBUG=$(jq -r '.results.build_debug' "$report")
              RELEASE=$(jq -r '.results.build_release' "$report")
              OVERALL=$(jq -r '.results.overall' "$report")
              
              POD_ICON=$([[ "$POD" == "success" ]] && echo "‚úÖ" || echo "‚ùå")
              DEBUG_ICON=$([[ "$DEBUG" == "success" ]] && echo "‚úÖ" || echo "‚ùå")
              RELEASE_ICON=$([[ "$RELEASE" == "success" ]] && echo "‚úÖ" || echo "‚ùå")
              
              STATUS_ICON="‚ùå"
              [[ "$OVERALL" == "PASS" ]] && STATUS_ICON="‚úÖ"
              [[ "$OVERALL" == "PARTIAL" ]] && STATUS_ICON="‚ö†Ô∏è"
              
              echo "| $MACOS | $XCODE | $POD_ICON | $DEBUG_ICON | $RELEASE_ICON | $STATUS_ICON |" >> compatibility-matrix.md
            fi
          done
          
          echo "" >> compatibility-matrix.md
          echo "## Legend" >> compatibility-matrix.md
          echo "- ‚úÖ Success" >> compatibility-matrix.md
          echo "- ‚ùå Failed" >> compatibility-matrix.md
          echo "- ‚ö†Ô∏è Partial Success (Debug only)" >> compatibility-matrix.md
          
          cat compatibility-matrix.md >> $GITHUB_STEP_SUMMARY
          
      - name: Upload compatibility matrix
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-matrix
          path: compatibility-matrix.md
          retention-days: 90