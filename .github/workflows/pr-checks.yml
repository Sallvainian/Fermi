name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  FLUTTER_VERSION: "3.24.5"

jobs:
  # Quick checks that should pass before full CI
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check if PR title follows conventional commits
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: ]]; then
            echo "::error::PR title must follow conventional commits format"
            echo "Examples:"
            echo "  feat: add new feature"
            echo "  fix: resolve bug in authentication"
            echo "  docs: update README"
            exit 1
          fi
          
      - name: Check file sizes
        run: |
          # Check for large files (>1MB)
          large_files=$(find . -type f -size +1M | grep -v -E "\.git|build|\.gradle" || true)
          if [ -n "$large_files" ]; then
            echo "::warning::Large files detected (>1MB):"
            echo "$large_files"
          fi
          
      - name: Check for merge conflicts
        run: |
          if grep -r "^<<<<<<< " --include="*.dart" --include="*.yaml" --include="*.yml" .; then
            echo "::error::Merge conflict markers found"
            exit 1
          fi

  # Lint and format checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Check formatting
        run: |
          dart format . --set-exit-if-changed
          if [ $? -ne 0 ]; then
            echo "::error::Code is not properly formatted. Run 'dart format .' locally"
            exit 1
          fi
          
      - name: Analyze code
        run: |
          flutter analyze --no-fatal-infos
          if [ $? -ne 0 ]; then
            echo "::error::Code analysis failed. Fix the issues before merging"
            exit 1
          fi
          
      - name: Check imports
        run: |
          flutter pub global activate import_sorter
          flutter pub global run import_sorter:main --exit-if-changed
          if [ $? -ne 0 ]; then
            echo "::error::Imports are not properly sorted. Run 'flutter pub run import_sorter:main' locally"
            exit 1
          fi

  # Security checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for secrets
        run: |
          # Check for potential secrets in code
          patterns=(
            "AIza[0-9A-Za-z-_]{35}"  # Google API Key
            "AAAA[A-Za-z0-9_-]{7}:[A-Za-z0-9_-]{140}"  # Firebase Server Key
            "-----BEGIN RSA PRIVATE KEY-----"
            "-----BEGIN PRIVATE KEY-----"
            "(?i)(api[_-]?key|apikey|secret[_-]?key|password|passwd|pwd)[[:space:]]*[:=][[:space:]]*['\"]?[A-Za-z0-9_-]{10,}"
          )
          
          for pattern in "${patterns[@]}"; do
            if grep -r -E "$pattern" --include="*.dart" --include="*.yaml" --include="*.yml" --exclude-dir=".git" .; then
              echo "::error::Potential secrets detected in code!"
              exit 1
            fi
          done
          
      - name: Check dependencies
        run: |
          # Check pubspec.yaml for suspicious packages
          suspicious_packages=(
            "crypto_miner"
            "hidden_process"
            "keylogger"
          )
          
          for package in "${suspicious_packages[@]}"; do
            if grep -q "$package" pubspec.yaml; then
              echo "::error::Suspicious package detected: $package"
              exit 1
            fi
          done

  # Documentation checks
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check README
        run: |
          if [ ! -f "README.md" ]; then
            echo "::error::README.md file is missing"
            exit 1
          fi
          
      - name: Check for outdated TODOs
        run: |
          # Find TODOs older than 30 days
          old_todos=$(git grep -n "TODO" | while read -r line; do
            file=$(echo "$line" | cut -d: -f1)
            line_num=$(echo "$line" | cut -d: -f2)
            todo_date=$(git blame -L "$line_num,$line_num" "$file" 2>/dev/null | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' | head -1)
            
            if [ -n "$todo_date" ]; then
              days_old=$(( ($(date +%s) - $(date -d "$todo_date" +%s)) / 86400 ))
              if [ $days_old -gt 30 ]; then
                echo "$file:$line_num - TODO is $days_old days old"
              fi
            fi
          done)
          
          if [ -n "$old_todos" ]; then
            echo "::warning::Found TODOs older than 30 days:"
            echo "$old_todos"
          fi

  # PR size check
  pr-size:
    name: PR Size Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { additions, deletions, changed_files } = pr;
            const total_changes = additions + deletions;
            
            console.log(`PR contains ${changed_files} files with ${additions} additions and ${deletions} deletions`);
            
            // Define size categories
            let size_label;
            if (total_changes < 10) {
              size_label = 'size/XS';
            } else if (total_changes < 100) {
              size_label = 'size/S';
            } else if (total_changes < 500) {
              size_label = 'size/M';
            } else if (total_changes < 1000) {
              size_label = 'size/L';
            } else {
              size_label = 'size/XL';
              core.warning(`This PR is very large (${total_changes} changes). Consider breaking it into smaller PRs.`);
            }
            
            // Add size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [size_label]
            });
            
            // Add warning comment for very large PRs
            if (total_changes > 1000) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `⚠️ This PR contains ${total_changes} changes across ${changed_files} files. Large PRs are harder to review and more likely to introduce bugs. Consider breaking this into smaller, focused PRs.`
              });
            }

  # Summary
  summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quick-checks, lint, security, documentation, pr-size]
    if: always()
    
    steps:
      - name: Summary
        uses: actions/github-script@v7
        with:
          script: |
            const checks = [
              { name: 'Quick Checks', status: '${{ needs.quick-checks.result }}' },
              { name: 'Lint & Format', status: '${{ needs.lint.result }}' },
              { name: 'Security', status: '${{ needs.security.result }}' },
              { name: 'Documentation', status: '${{ needs.documentation.result }}' },
              { name: 'PR Size', status: '${{ needs.pr-size.result }}' }
            ];
            
            const failed = checks.filter(c => c.status === 'failure');
            const passed = checks.filter(c => c.status === 'success');
            
            let message = '## PR Check Summary\n\n';
            
            if (failed.length === 0) {
              message += '✅ All checks passed!\n\n';
            } else {
              message += `❌ ${failed.length} checks failed\n\n`;
              message += '### Failed Checks\n';
              failed.forEach(check => {
                message += `- ❌ ${check.name}\n`;
              });
              message += '\n';
            }
            
            message += '### All Checks\n';
            checks.forEach(check => {
              const icon = check.status === 'success' ? '✅' : '❌';
              message += `- ${icon} ${check.name}\n`;
            });
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Check Summary')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }