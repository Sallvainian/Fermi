name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  FLUTTER_VERSION: "3.24.5"
  JAVA_VERSION: "17"

jobs:
  # Create release and build artifacts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" ${LAST_TAG}..HEAD)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed
          
          ${CHANGELOG}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${{ steps.get_version.outputs.version }}
          EOF
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  # Build and upload Android APK
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Create .env file
        run: |
          echo "# Production environment file" > .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          
      - name: Update version
        run: |
          VERSION=${{ needs.release.outputs.version }}
          BUILD_NUMBER=${{ github.run_number }}
          sed -i "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
      - name: Build APK
        run: flutter build apk --release --split-per-abi
        
      - name: Build App Bundle
        run: flutter build appbundle --release
        
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: teacher-dashboard-v${{ needs.release.outputs.version }}-armeabi-v7a.apk
          asset_content_type: application/vnd.android.package-archive
          
      - name: Upload ARM64 APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: teacher-dashboard-v${{ needs.release.outputs.version }}-arm64-v8a.apk
          asset_content_type: application/vnd.android.package-archive
          
      - name: Upload App Bundle to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: build/app/outputs/bundle/release/app-release.aab
          asset_name: teacher-dashboard-v${{ needs.release.outputs.version }}.aab
          asset_content_type: application/octet-stream

  # Build and upload Web version
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Create .env file
        run: |
          echo "# Production environment file" > .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          
      - name: Update version
        run: |
          VERSION=${{ needs.release.outputs.version }}
          BUILD_NUMBER=${{ github.run_number }}
          sed -i "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
      - name: Build Web
        run: flutter build web --release
        
      - name: Compress Web build
        run: |
          cd build
          tar -czf web-release.tar.gz web/
          
      - name: Upload Web build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: build/web-release.tar.gz
          asset_name: teacher-dashboard-web-v${{ needs.release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Build Windows executable
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Create .env file
        run: |
          echo "# Production environment file" > .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          
      - name: Update version
        shell: bash
        run: |
          VERSION=${{ needs.release.outputs.version }}
          BUILD_NUMBER=${{ github.run_number }}
          sed -i "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
      - name: Build Windows
        run: flutter build windows --release
        
      - name: Compress Windows build
        run: |
          cd build/windows/x64/runner
          Compress-Archive -Path Release -DestinationPath ../../../../windows-release.zip
          
      - name: Upload Windows build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: windows-release.zip
          asset_name: teacher-dashboard-windows-v${{ needs.release.outputs.version }}.zip
          asset_content_type: application/zip

  # Deploy to Firebase Hosting (Web)
  deploy-web:
    name: Deploy Web to Firebase
    runs-on: ubuntu-latest
    needs: [release, build-web]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Create .env file
        run: |
          echo "# Production environment file" > .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          
      - name: Build Web
        run: flutter build web --release
        
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}