name: Deploy
permissions:
  contents: read

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
      platform:
        description: 'Platform to deploy'
        required: true
        type: choice
        options:
          - all
          - web
          - android
          - ios

env:
  FLUTTER_VERSION: '3.32.8'

jobs:
  # Deploy Web to Firebase Hosting
  deploy-web:
    name: Deploy Web
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'web' || github.event.inputs.platform == 'all'))
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build web for production
        run: |
          flutter build web --release \
            --web-renderer html \
            --dart-define=ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }}
            
      - name: Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: ${{ github.event.inputs.environment == 'production' && 'live' || 'preview' }}
          projectId: teacher-dashboard-flutter
          target: ${{ github.event.inputs.environment || 'staging' }}

  # Deploy Android to Google Play
  deploy-android:
    name: Deploy Android
    runs-on: ubuntu-latest
    if: |
      (startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all'))
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Decode Android keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
          
      - name: Create key.properties
        env:
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        run: |
          echo "storePassword=$ANDROID_STORE_PASSWORD" > android/key.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties
          
      - name: Build App Bundle
        run: |
          flutter build appbundle --release \
            --dart-define=ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
            
      - name: Upload to Google Play Console
        if: github.event.inputs.environment != 'staging'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.yourcompany.teacherdashboard
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: ${{ github.event.inputs.environment == 'production' && 'production' || 'internal' }}
          status: completed
          whatsNewDirectory: whatsNew
          
      - name: Upload AAB as artifact (staging)
        if: github.event.inputs.environment == 'staging'
        uses: actions/upload-artifact@v4
        with:
          name: android-staging-aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30
          
      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties

  # Deploy iOS to TestFlight
  deploy-ios:
    name: Deploy iOS
    runs-on: macos-latest
    if: |
      (startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'all'))
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          architecture: x64
          
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
          
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-pods-
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update
          cd ..
          
      - name: Setup provisioning profile
        env:
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Build iOS app
        run: |
          flutter build ipa --release \
            --dart-define=ENVIRONMENT=${{ github.event.inputs.environment || 'production' }} \
            --export-options-plist=ios/ExportOptions.plist
            
      - name: Upload to TestFlight
        if: github.event.inputs.environment != 'staging'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file build/ios/ipa/*.ipa \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
            
      - name: Upload IPA as artifact (staging)
        if: github.event.inputs.environment == 'staging'
        uses: actions/upload-artifact@v4
        with:
          name: ios-staging-ipa
          path: build/ios/ipa/*.ipa
          retention-days: 30

  # Post-deployment smoke tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-web]
    if: always() && needs.deploy-web.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Wait for deployment
        run: sleep 30
        
      - name: Run smoke tests
        run: |
          # Simple health check
          URL="https://teacher-dashboard-flutter.web.app"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ $response -eq 200 ]; then
            echo "✅ Deployment successful - site is accessible"
          else
            echo "❌ Deployment may have issues - HTTP $response"
            exit 1
          fi