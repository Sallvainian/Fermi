name: Flutter CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.24.5"
  JAVA_VERSION: "17"
  RUBY_VERSION: "3.2"

jobs:
  # Job to check code quality
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Check formatting
        run: dart format . --set-exit-if-changed
        
      - name: Analyze code
        run: flutter analyze --no-fatal-infos
        
      - name: Run import sorter
        run: |
          flutter pub global activate import_sorter
          flutter pub global run import_sorter:main --exit-if-changed
        
      - name: Check for TODO comments
        run: |
          if grep -r "TODO" lib/ test/; then
            echo "::warning::TODO comments found in code"
          fi

  # Job to run tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Run tests with coverage
        run: flutter test --coverage --test-randomize-ordering-seed random
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        
      - name: Check test coverage
        run: |
          if [ -f coverage/lcov.info ]; then
            total_coverage=$(lcov --summary coverage/lcov.info 2>/dev/null | grep -E "lines\.\.\.\.\.\.: ([0-9.]+)%" -o | grep -E "[0-9.]+" -o || echo "0")
            echo "Total coverage: ${total_coverage}%"
            if (( $(echo "$total_coverage < 70" | bc -l) )); then
              echo "::warning::Test coverage is below 70% (${total_coverage}%)"
            fi
          fi

  # Job to build for multiple platforms
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: Android
            build_command: flutter build apk --release
            artifact_path: build/app/outputs/flutter-apk/app-release.apk
            artifact_name: android-release
            
          - os: ubuntu-latest
            target: Web
            build_command: flutter build web --release
            artifact_path: build/web
            artifact_name: web-release
            
          - os: windows-latest
            target: Windows
            build_command: flutter build windows --release
            artifact_path: build/windows/x64/runner/Release
            artifact_name: windows-release
            
          - os: macos-latest
            target: iOS
            build_command: flutter build ios --release --no-codesign
            artifact_path: build/ios/iphoneos/Runner.app
            artifact_name: ios-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java (for Android)
        if: matrix.target == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Create .env file
        run: |
          echo "# Placeholder environment file for CI" > .env
          echo "FIREBASE_PROJECT_ID=placeholder" >> .env
          
      - name: Build ${{ matrix.target }}
        run: ${{ matrix.build_command }}
        
      - name: Upload ${{ matrix.target }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 7

  # Job to check dependency security
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Check for outdated packages
        run: |
          outdated=$(flutter pub outdated --json | jq -r '.packages[] | select(.isOutdated == true) | "\(.package): \(.current.version) -> \(.latest.version)"')
          if [ -n "$outdated" ]; then
            echo "::warning::Outdated packages found:"
            echo "$outdated"
          fi
        
      - name: Run dependency security audit
        run: |
          # Check for known vulnerabilities in dependencies
          flutter pub deps --json > deps.json
          # Add custom security checks here

  # Job for integration tests (optional, runs on larger runners)
  integration_test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Create .env file
        run: |
          echo "# Placeholder environment file for CI" > .env
          echo "FIREBASE_PROJECT_ID=placeholder" >> .env
          
      - name: Run integration tests
        run: |
          if [ -d "integration_test" ] && [ "$(ls -A integration_test/*.dart 2>/dev/null)" ]; then
            flutter test integration_test/
          else
            echo "No integration tests found, skipping..."
          fi

  # Summary job for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs passed successfully"
          fi