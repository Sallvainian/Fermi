name: iOS Certificate Generator

on:
  workflow_dispatch:
    inputs:
      cert_type:
        description: 'Certificate type to generate'
        required: true
        default: 'distribution'
        type: choice
        options:
          - distribution
          - development
      email:
        description: 'Your email for the certificate'
        required: true
      name:
        description: 'Your name for the certificate'
        required: true

jobs:
  generate-certificates:
    name: Generate iOS Certificates
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate CSR and Private Key
        id: generate_csr
        run: |
          # Generate private key
          openssl genrsa -out private.key 2048
          
          # Generate CSR
          openssl req -new -key private.key -out CertificateSigningRequest.certSigningRequest \
            -subj "/emailAddress=${{ github.event.inputs.email }}/CN=${{ github.event.inputs.name }}/C=US"
          
          # Save as artifacts
          echo "CSR generated successfully"
          
      - name: Encode files for download
        run: |
          # Encode CSR
          base64 CertificateSigningRequest.certSigningRequest > csr_base64.txt
          
          # Encode private key (will need this later)
          base64 private.key > private_key_base64.txt
          
          # Create instructions file
          cat > instructions.md << 'EOF'
          # Certificate Generation Instructions
          
          ## Your CSR has been generated!
          
          ### Next Steps:
          
          1. **Download the artifacts from this workflow run**
             - CertificateSigningRequest.certSigningRequest
             - private.key (KEEP THIS SAFE!)
          
          2. **Go to Apple Developer Portal**
             - Visit: https://developer.apple.com/account/resources/certificates/add
          
          3. **Create Certificate**
             - Choose: ${{ github.event.inputs.cert_type == 'distribution' && 'Apple Distribution' || 'Apple Development' }}
             - Upload the CSR file
             - Download the generated certificate (.cer file)
          
          4. **Create P12 Certificate** (on any computer with OpenSSL)
             ```bash
             # Download Apple WWDR Certificate
             curl -O https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer
             
             # Convert your certificate to PEM
             openssl x509 -in distribution.cer -inform DER -out distribution.pem -outform PEM
             
             # Create P12 (you'll be prompted for a password)
             openssl pkcs12 -export -out Certificates.p12 \
               -inkey private.key \
               -in distribution.pem \
               -certfile AppleWWDRCAG3.cer
             ```
          
          5. **Encode for GitHub Secrets**
             ```bash
             # On Windows (PowerShell)
             [Convert]::ToBase64String([System.IO.File]::ReadAllBytes("Certificates.p12")) | Out-File cert_base64.txt
             
             # Or on Git Bash/WSL
             base64 Certificates.p12 > cert_base64.txt
             ```
          
          6. **Add to GitHub Secrets**
             - `BUILD_CERTIFICATE_BASE64`: Contents of cert_base64.txt
             - `P12_PASSWORD`: The password you set in step 4
          
          ## Important Security Notes:
          - Keep private.key secure - it's your signing key!
          - Never commit these files to your repository
          - Store the P12 password in a password manager
          
          ## Certificate Type: ${{ github.event.inputs.cert_type }}
          Generated on: $(date)
          EOF
          
      - name: Upload CSR
        uses: actions/upload-artifact@v4
        with:
          name: certificate-signing-request
          path: |
            CertificateSigningRequest.certSigningRequest
            instructions.md
          retention-days: 7
          
      - name: Upload Private Key (Encrypted)
        uses: actions/upload-artifact@v4
        with:
          name: private-key-secure
          path: private.key
          retention-days: 1  # Delete quickly for security
          
      - name: Display Next Steps
        run: |
          echo "## ✅ Certificate Signing Request Generated!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download these artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "1. CertificateSigningRequest.certSigningRequest" >> $GITHUB_STEP_SUMMARY
          echo "2. private.key (⚠️ Keep this secure!)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Apple Developer Certificates](https://developer.apple.com/account/resources/certificates/add)" >> $GITHUB_STEP_SUMMARY
          echo "2. Upload the CSR file" >> $GITHUB_STEP_SUMMARY
          echo "3. Download the certificate" >> $GITHUB_STEP_SUMMARY
          echo "4. Follow the instructions in the artifacts to create P12" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Security Reminder:" >> $GITHUB_STEP_SUMMARY
          echo "The private key artifact will be automatically deleted in 1 day for security." >> $GITHUB_STEP_SUMMARY
          echo "Download it immediately and store it securely!" >> $GITHUB_STEP_SUMMARY