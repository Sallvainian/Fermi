name: Mobile Builds
on:
  push:
    tags:
      - 'android-v*'
      - 'ios-v*'
  workflow_dispatch:
    inputs:
      platform:
        description: Platform to build
        type: choice
        required: true
        default: both
        options: [android, ios, both]
concurrency:
  group: mobile-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read

jobs:
  android:
    name: Android APK
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/android-v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both'))
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Write google-services.json
        shell: bash
        run: |
          # Check if file already exists (committed to repo)
          if [ -f "android/app/google-services.json" ] && [ -s "android/app/google-services.json" ]; then
            echo "✓ google-services.json already exists in repository"
          elif [ -n "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" ]; then
            echo "Writing google-services.json from secret..."
            echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 -d > android/app/google-services.json
          fi
          test -s android/app/google-services.json || (echo "ERROR: google-services.json missing/empty" && exit 1)

      - name: Build Android APK
        shell: bash
        run: |
          set -euo pipefail
          flutter build apk --release \
            --dart-define=FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} \
            --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --dart-define=FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} \
            --dart-define=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
            --dart-define=FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
            --dart-define=FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }} \
            --dart-define=FIREBASE_APP_ID_ANDROID=${{ secrets.FIREBASE_APP_ID_ANDROID }} \
            --dart-define=FIREBASE_VAPID_KEY=${{ secrets.FIREBASE_VAPID_KEY }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: android-artifact
          path: build/app/outputs/flutter-apk/app-release.apk

  ios:
    name: iOS IPA
    runs-on: macos-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/ios-v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'))
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Write GoogleService-Info.plist
        shell: bash
        run: |
          # Check if file already exists (committed to repo)
          if [ -f "ios/Runner/GoogleService-Info.plist" ] && [ -s "ios/Runner/GoogleService-Info.plist" ]; then
            echo "✓ GoogleService-Info.plist already exists in repository"
          elif [ -n "${{ secrets.GOOGLESERVICE_INFO_PLIST_B64 }}" ]; then
            echo "Writing GoogleService-Info.plist from secret..."
            echo "${{ secrets.GOOGLESERVICE_INFO_PLIST_B64 }}" | base64 -d > ios/Runner/GoogleService-Info.plist
          fi
          test -s ios/Runner/GoogleService-Info.plist || (echo "ERROR: GoogleService-Info.plist missing/empty" && exit 1)
          echo "GoogleService-Info.plist ready ($(wc -c < ios/Runner/GoogleService-Info.plist) bytes)"

      - name: Install Apple Certificates
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          BUILD_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.BUILD_DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # Create variables
          DEV_CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
          DIST_CERTIFICATE_PATH=$RUNNER_TEMP/dist_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificates from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $DEV_CERTIFICATE_PATH
          echo -n "$BUILD_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DIST_CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import BOTH certificates to keychain
          security import $DEV_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DIST_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Show available identities for debugging
          echo "Available signing identities:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Install Provisioning Profile
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          # Create provisioning profile directory
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          
          # Import provisioning profile from secrets
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Extract UUID and Name from provisioning profile
          PP_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          PP_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          echo "Provisioning Profile UUID: $PP_UUID"
          echo "Provisioning Profile Name: $PP_NAME"
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PP_UUID.mobileprovision
          
          # Export for later use
          echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV
          echo "PP_NAME=$PP_NAME" >> $GITHUB_ENV

      - name: Update ExportOptions.plist with Provisioning Profile
        run: |
          # Update the ExportOptions.plist to use the correct provisioning profile name
          echo "Updating ExportOptions.plist with provisioning profile: ${{ env.PP_NAME }}"
          
          # Create a properly formatted ExportOptions.plist
          cat > ios/ExportOptions.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>app-store</string>
    <key>teamID</key>
    <string>${{ secrets.DEVELOPMENT_TEAM }}</string>
    <key>uploadBitcode</key>
    <false/>
    <key>compileBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <true/>
    <key>signingStyle</key>
    <string>manual</string>
    <key>signingCertificate</key>
    <string>Apple Distribution</string>
    <key>provisioningProfiles</key>
    <dict>
        <key>com.academic-tools.fermi</key>
        <string>${{ env.PP_NAME }}</string>
    </dict>
    <key>destination</key>
    <string>export</string>
</dict>
</plist>
EOF
          
          echo "✓ Updated ExportOptions.plist"
          cat ios/ExportOptions.plist

      - name: CocoaPods setup
        run: |
          cd ios
          pod repo update
          pod install
          cd ..

      - name: Configure Xcode Project for Manual Signing
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          # Update the Xcode project.pbxproj file with our signing configuration
          cd ios
          
          # Debug: Show provisioning profile info
          echo "Using PP_UUID: ${{ env.PP_UUID }}"
          echo "Using PP_NAME: ${{ env.PP_NAME }}"
          
          # CRITICAL: Update the bundle ID to match our provisioning profile
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*/PRODUCT_BUNDLE_IDENTIFIER = com.academic-tools.fermi;/g" Runner.xcodeproj/project.pbxproj
          
          # Use sed to update the project.pbxproj with our signing settings
          sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM;/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_STYLE = .*/CODE_SIGN_STYLE = Manual;/g" Runner.xcodeproj/project.pbxproj
          # FIX: Use proper GitHub env variable syntax for PP_UUID
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = \"${{ env.PP_UUID }}\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_IDENTITY = .*/CODE_SIGN_IDENTITY = \"iPhone Distribution\";/g" Runner.xcodeproj/project.pbxproj
          
          # If the settings don't exist, add them
          if ! grep -q "DEVELOPMENT_TEAM = " Runner.xcodeproj/project.pbxproj; then
            sed -i '' "/PRODUCT_BUNDLE_IDENTIFIER/a\
            DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM;" Runner.xcodeproj/project.pbxproj
          fi
          
          if ! grep -q "CODE_SIGN_STYLE = " Runner.xcodeproj/project.pbxproj; then
            sed -i '' "/PRODUCT_BUNDLE_IDENTIFIER/a\
            CODE_SIGN_STYLE = Manual;" Runner.xcodeproj/project.pbxproj
          fi
          
          if ! grep -q "PROVISIONING_PROFILE_SPECIFIER = " Runner.xcodeproj/project.pbxproj; then
            sed -i '' "/PRODUCT_BUNDLE_IDENTIFIER/a\
            PROVISIONING_PROFILE_SPECIFIER = \"${{ env.PP_UUID }}\";" Runner.xcodeproj/project.pbxproj
          fi
          
          echo "✓ Updated project.pbxproj with signing settings"
          
          # Debug: Verify the changes
          echo "Verifying signing settings in project.pbxproj:"
          grep -E "(DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|CODE_SIGN_IDENTITY)" Runner.xcodeproj/project.pbxproj | head -20
          
          cd ..

      - name: Build iOS Archive
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        shell: bash
        run: |
          set -euo pipefail
          
          # Build the Flutter app WITH signing (verbose to see what's happening)
          flutter build ipa --release \
            --build-name=1.0.0 \
            --build-number=1 \
            --export-options-plist=ios/ExportOptions.plist \
            --dart-define=FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} \
            --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --dart-define=FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} \
            --dart-define=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
            --dart-define=FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
            --dart-define=FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }} \
            --dart-define=FIREBASE_APP_ID_IOS=${{ secrets.FIREBASE_APP_ID_IOS }} \
            --dart-define=FIREBASE_VAPID_KEY=${{ secrets.FIREBASE_VAPID_KEY }} \
            --verbose || {
              echo "Build failed. Checking for archive..."
              if [ -d "build/ios/archive/Runner.xcarchive" ]; then
                echo "Archive was created but export failed. Archive contents:"
                ls -la build/ios/archive/Runner.xcarchive/
                echo "Checking Products/Applications:"
                ls -la build/ios/archive/Runner.xcarchive/Products/Applications/ || true
              fi
              exit 1
            }
          
          echo "✓ Flutter build ipa completed"

      - name: Debug Archive and Export
        shell: bash
        run: |
          echo "=== Checking build outputs ==="
          
          # Check if archive was created
          if [ -d "build/ios/archive/Runner.xcarchive" ]; then
            echo "✓ Archive found at build/ios/archive/Runner.xcarchive"
            echo "Archive size: $(du -sh build/ios/archive/Runner.xcarchive | cut -f1)"
            
            # Check archive contents
            echo "Archive Info.plist:"
            plutil -p build/ios/archive/Runner.xcarchive/Info.plist | head -20
            
            # Check if app exists in archive
            if [ -d "build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app" ]; then
              echo "✓ Runner.app found in archive"
              
              # Check app's embedded provisioning profile
              if [ -f "build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app/embedded.mobileprovision" ]; then
                echo "✓ Embedded provisioning profile found"
                security cms -D -i build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app/embedded.mobileprovision | plutil -p - | grep -E "(Name|UUID|TeamIdentifier)" | head -10
              else
                echo "✗ No embedded provisioning profile found"
              fi
            else
              echo "✗ Runner.app not found in archive"
            fi
          else
            echo "✗ No archive found at build/ios/archive/Runner.xcarchive"
          fi
          
          # Check if IPA was created
          echo ""
          echo "=== Checking IPA export ==="
          if [ -d "build/ios/ipa" ]; then
            echo "IPA directory contents:"
            ls -la build/ios/ipa/
            
            # Check for any IPA files
            if ls build/ios/ipa/*.ipa 1> /dev/null 2>&1; then
              echo "✓ IPA file(s) found:"
              ls -la build/ios/ipa/*.ipa
            else
              echo "✗ No IPA files found in build/ios/ipa/"
              
              # Check for export logs
              if [ -f "build/ios/ipa/ExportOptions.plist" ]; then
                echo "Export options used:"
                cat build/ios/ipa/ExportOptions.plist
              fi
              
              # Try manual export as a fallback
              echo ""
              echo "=== Attempting manual export ==="
              xcodebuild -exportArchive \
                -archivePath build/ios/archive/Runner.xcarchive \
                -exportPath build/ios/ipa \
                -exportOptionsPlist ios/ExportOptions.plist \
                -allowProvisioningUpdates || {
                  echo "Manual export also failed"
                }
            fi
          else
            echo "✗ IPA directory doesn't exist"
          fi

      - name: Verify IPA Creation
        shell: bash
        run: |
          # Final verification
          if ls build/ios/ipa/*.ipa 1> /dev/null 2>&1; then
            echo "✓ IPA file created successfully:"
            ls -la build/ios/ipa/*.ipa
          else
            echo "✗ IPA creation failed"
            echo ""
            echo "Build summary:"
            echo "- Archive: $([ -d 'build/ios/archive/Runner.xcarchive' ] && echo 'Created' || echo 'Failed')"
            echo "- IPA: Not created"
            echo ""
            echo "This usually indicates an export problem. Check:"
            echo "1. Provisioning profile matches bundle ID"
            echo "2. Signing certificate is valid"
            echo "3. ExportOptions.plist is correct"
            exit 1
          fi

      - name: Clean up keychain
        if: always()
        run: |
          if [ -f "$RUNNER_TEMP/app-signing.keychain-db" ]; then
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ios-artifact
          path: |
            build/ios/ipa/*.ipa
            build/ios/archive/*.xcarchive