name: Mobile Builds
on:
  push:
    tags:
      - 'android-v*'
      - 'ios-v*'
  workflow_dispatch:
    inputs:
      platform:
        description: Platform to build
        type: choice
        required: true
        default: both
        options: [android, ios, both]
concurrency:
  group: mobile-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read

jobs:
  android:
    name: Android APK
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/android-v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both'))
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Write google-services.json
        shell: bash
        run: |
          # Check if file already exists (committed to repo)
          if [ -f "android/app/google-services.json" ] && [ -s "android/app/google-services.json" ]; then
            echo "✓ google-services.json already exists in repository"
          elif [ -n "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" ]; then
            echo "Writing google-services.json from secret..."
            echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 -d > android/app/google-services.json
          fi
          test -s android/app/google-services.json || (echo "ERROR: google-services.json missing/empty" && exit 1)

      - name: Build Android APK
        shell: bash
        run: |
          set -euo pipefail
          flutter build apk --release \
            --dart-define=FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} \
            --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --dart-define=FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} \
            --dart-define=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
            --dart-define=FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
            --dart-define=FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }} \
            --dart-define=FIREBASE_APP_ID_ANDROID=${{ secrets.FIREBASE_APP_ID_ANDROID }} \
            --dart-define=FIREBASE_VAPID_KEY=${{ secrets.FIREBASE_VAPID_KEY }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: android-artifact
          path: build/app/outputs/flutter-apk/app-release.apk

  ios:
    name: iOS IPA
    runs-on: macos-15
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/ios-v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'))
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16 (iOS 18 SDK REQUIRED)
        run: |
          # Apple REQUIRES iOS 18 SDK for App Store submissions
          # Use Xcode 16 which has iOS 18 SDK
          sudo xcode-select -s /Applications/Xcode_16.app/Contents/Developer
          xcodebuild -version
          xcodebuild -showsdks | grep iOS

      - name: Verify iOS SDK
        run: |
          echo "Checking iOS SDK availability..."
          
          # Show available SDKs (Xcode 16 should have iOS 18 SDK)
          echo "Available SDKs:"
          xcodebuild -showsdks | grep -i ios || true
          
          # List installed runtimes (for reference)
          echo "Installed runtimes:"
          xcrun simctl list runtimes || true
          
          # Note: We don't need to download the full iOS 18 runtime/simulator
          # for archive builds. The SDK that comes with Xcode 16 is sufficient.
          # Skip the lengthy download that takes 30+ minutes.
          echo "iOS SDK is ready for archive build (skipping runtime download)"

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Verify GoogleService-Info.plist
        shell: bash
        run: |
          # The file is committed to the repository, just verify it exists
          if [ -f "ios/Runner/GoogleService-Info.plist" ] && [ -s "ios/Runner/GoogleService-Info.plist" ]; then
            echo "✓ GoogleService-Info.plist exists in repository"
            echo "File size: $(wc -c < ios/Runner/GoogleService-Info.plist) bytes"
            # Verify Bundle ID matches
            if grep -q "com.academic-tools.fermi" ios/Runner/GoogleService-Info.plist; then
              echo "✓ Bundle ID verified: com.academic-tools.fermi"
            else
              echo "⚠️ Bundle ID mismatch in GoogleService-Info.plist"
            fi
          else
            echo "ERROR: GoogleService-Info.plist not found in repository"
            echo "File should be at: ios/Runner/GoogleService-Info.plist"
            ls -la ios/Runner/ || true
            exit 1
          fi

      - name: Setup Certificates and Provisioning Profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          BUILD_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.BUILD_DISTRIBUTION_CERTIFICATE_BASE64 }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # Create variables
          DEV_CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
          DIST_CERTIFICATE_PATH=$RUNNER_TEMP/dist_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificates from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $DEV_CERTIFICATE_PATH
          echo -n "$BUILD_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DIST_CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificates to keychain
          security import $DEV_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DIST_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Import provisioning profile
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Extract UUID and Name from provisioning profile
          PP_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          PP_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          
          echo "Profile UUID: $PP_UUID"
          echo "Profile Name: $PP_NAME"
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PP_UUID.mobileprovision
          
          # Export for later use
          echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV
          echo "PP_NAME=$PP_NAME" >> $GITHUB_ENV
          
          # Show available signing identities
          echo "Available signing identities:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Create ExportOptions.plist
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          # Use printf to avoid heredoc parsing issues
          printf '%s\n' \
            '<?xml version="1.0" encoding="UTF-8"?>' \
            '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' \
            '<plist version="1.0">' \
            '<dict>' \
            '    <key>method</key>' \
            '    <string>app-store</string>' \
            '    <key>teamID</key>' \
            "    <string>$DEVELOPMENT_TEAM</string>" \
            '    <key>signingStyle</key>' \
            '    <string>manual</string>' \
            '    <key>signingCertificate</key>' \
            '    <string>Apple Distribution</string>' \
            '    <key>provisioningProfiles</key>' \
            '    <dict>' \
            '        <key>com.academic-tools.fermi</key>' \
            "        <string>$PP_NAME</string>" \
            '    </dict>' \
            '    <key>stripSwiftSymbols</key>' \
            '    <true/>' \
            '    <key>uploadBitcode</key>' \
            '    <false/>' \
            '    <key>uploadSymbols</key>' \
            '    <true/>' \
            '    <key>thinning</key>' \
            '    <string>&lt;none&gt;</string>' \
            '</dict>' \
            '</plist>' > ios/ExportOptions.plist
          
          echo "✓ Created ExportOptions.plist"

      - name: Update Xcode Project Settings
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          cd ios
          
          # Update bundle ID and signing settings
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*/PRODUCT_BUNDLE_IDENTIFIER = com.academic-tools.fermi;/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM;/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_STYLE = .*/CODE_SIGN_STYLE = Manual;/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = \"$PP_UUID\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/CODE_SIGN_IDENTITY = .*/CODE_SIGN_IDENTITY = \"iPhone Distribution\";/g" Runner.xcodeproj/project.pbxproj
          
          # Update iOS deployment target to iOS 18.0 as required by Apple
          sed -i '' "s/IPHONEOS_DEPLOYMENT_TARGET = .*/IPHONEOS_DEPLOYMENT_TARGET = 18.0;/g" Runner.xcodeproj/project.pbxproj
          
          # Also update in Podfile
          sed -i '' "s/config.build_settings\['IPHONEOS_DEPLOYMENT_TARGET'\] = .*/config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '18.0'/g" Podfile
          sed -i '' "s/platform :ios, .*/platform :ios, '18.0'/g" Podfile
          
          # Verify changes
          echo "Verifying Xcode settings:"
          grep -E "(PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|IPHONEOS_DEPLOYMENT_TARGET)" Runner.xcodeproj/project.pbxproj | head -15
          
          cd ..

      - name: Clean and Install CocoaPods Dependencies
        run: |
          cd ios
          
          # Clean previous pod installations
          rm -rf Pods
          rm -f Podfile.lock
          
          # Clean derived data and module cache
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Caches/CocoaPods
          
          # Update pod repo and install with retries
          pod repo update || pod repo update --verbose
          
          # Try pod install with retry logic
          if ! pod install --repo-update; then
            echo "First pod install failed, retrying with cleanup..."
            pod deintegrate
            pod setup
            pod install --repo-update --verbose
          fi
          
          # Verify pods installed correctly
          if [ ! -d "Pods" ]; then
            echo "ERROR: Pods directory not created"
            echo "Attempting manual pod installation..."
            
            # Try one more time with full cleanup
            rm -rf ~/.cocoapods/repos/trunk
            pod setup
            pod install --repo-update
            
            if [ ! -d "Pods" ]; then
              echo "FATAL: Could not install pods after multiple attempts"
              exit 1
            fi
          fi
          
          echo "Pod installation completed successfully"
          ls -la Pods/ | head -20
          
          cd ..

      - name: Build iOS App (Without Code Signing)
        shell: bash
        run: |
          # Clean Flutter build cache
          flutter clean
          flutter pub get
          
          # Fix for non-modular header errors with Firebase
          # Add build settings to ios/Runner.xcodeproj/project.pbxproj
          cd ios
          
          # Update project settings to allow non-modular includes
          if ! grep -q "CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES" Runner.xcodeproj/project.pbxproj; then
            echo "Adding non-modular include settings to project..."
            sed -i '' 's/ENABLE_BITCODE = NO;/ENABLE_BITCODE = NO;\n\t\t\t\tCLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES = YES;/g' Runner.xcodeproj/project.pbxproj
          fi
          
          cd ..
          
          # Build the Flutter app WITHOUT code signing
          # Use iOS device build (not simulator) with generic destination
          echo "Building Flutter iOS app for device (archive)..."
          flutter build ios --release --no-codesign \
            --dart-define=FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} \
            --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --dart-define=FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} \
            --dart-define=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
            --dart-define=FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
            --dart-define=FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }} \
            --dart-define=FIREBASE_APP_ID_IOS=${{ secrets.FIREBASE_APP_ID_IOS }} \
            --dart-define=FIREBASE_VAPID_KEY=${{ secrets.FIREBASE_VAPID_KEY }} \
            --build-name=0.9.0 \
            --build-number=1
          
          echo "✓ Flutter build completed"

      - name: Archive with xcodebuild
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        shell: bash
        run: |
          # Clean build folder
          rm -rf build/ios
          
          # Set compiler flags for FirebaseFirestore compatibility
          export COMPILER_INDEX_STORE_ENABLE=NO
          export GCC_PREPROCESSOR_DEFINITIONS='$(inherited) TARGET_OS_VISION=0'
          
          # Create archive using xcodebuild with manual signing
          echo "Creating archive with xcodebuild..."
          
          xcodebuild clean archive -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -destination "generic/platform=iOS" \
            -configuration Release \
            -archivePath build/ios/Runner.xcarchive \
            archive \
            DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM}" \
            PROVISIONING_PROFILE_SPECIFIER="$PP_UUID" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            CODE_SIGN_STYLE="Manual" \
            CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES=YES \
            GCC_PREPROCESSOR_DEFINITIONS='$(inherited) COCOAPODS=1' \
            OTHER_CFLAGS='$(inherited) -Wno-error=non-modular-include-in-framework-module'
          
          # Verify archive was created
          if [ -d "build/ios/Runner.xcarchive" ]; then
            echo "✓ Archive created successfully"
            echo "Archive size: $(du -sh build/ios/Runner.xcarchive | cut -f1)"
          else
            echo "✗ Archive creation failed"
            exit 1
          fi

      - name: Export IPA from Archive
        shell: bash
        run: |
          # Export IPA from archive
          echo "Exporting IPA from archive..."
          
          mkdir -p build/ios/ipa
          
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ios/ExportOptions.plist \
            -allowProvisioningUpdates
          
          # Verify IPA was created
          if ls build/ios/ipa/*.ipa 1> /dev/null 2>&1; then
            echo "✓ IPA exported successfully:"
            ls -lah build/ios/ipa/*.ipa
          else
            echo "✗ IPA export failed"
            
            # Debug information
            echo "Archive contents:"
            ls -la build/ios/Runner.xcarchive/Products/Applications/ || true
            
            echo "Export directory contents:"
            ls -la build/ios/ipa/ || true
            
            # Check for error logs
            if [ -f "build/ios/ipa/DistributionSummary.plist" ]; then
              echo "Export summary:"
              plutil -p build/ios/ipa/DistributionSummary.plist
            fi
            
            exit 1
          fi

      - name: Verify Final Build
        shell: bash
        run: |
          echo "=== Build Verification ==="
          
          # Check archive
          if [ -d "build/ios/Runner.xcarchive" ]; then
            echo "✓ Archive: build/ios/Runner.xcarchive"
            
            # Check embedded provisioning profile
            if [ -f "build/ios/Runner.xcarchive/Products/Applications/Runner.app/embedded.mobileprovision" ]; then
              echo "✓ Provisioning profile embedded in archive"
            fi
          fi
          
          # Check IPA
          if ls build/ios/ipa/*.ipa 1> /dev/null 2>&1; then
            echo "✓ IPA files:"
            for ipa in build/ios/ipa/*.ipa; do
              echo "  - $(basename $ipa): $(du -h $ipa | cut -f1)"
              # Quick verification of IPA contents (fixed grep pipe issue)
              unzip -l "$ipa" | grep -E "(Runner.app|embedded.mobileprovision)" | head -5 || true
            done
          else
            echo "✗ No IPA files found"
            exit 1
          fi
          
          echo ""
          echo "✅ iOS build completed successfully!"

      - name: Clean up keychain
        if: always()
        run: |
          if [ -f "$RUNNER_TEMP/app-signing.keychain-db" ]; then
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ios-artifact
          path: |
            build/ios/ipa/*.ipa
            build/ios/Runner.xcarchive