name: Mobile Builds
on:
  push:
    tags:
      - 'android-v*'
      - 'ios-v*'
  workflow_dispatch:
    inputs:
      platform:
        description: Platform to build
        type: choice
        required: true
        default: both
        options: [android, ios, both]
concurrency:
  group: mobile-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read

jobs:
  android:
    name: Android APK
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/android-v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both'))
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Write google-services.json
        shell: bash
        run: |
          # Check if file already exists (committed to repo)
          if [ -f "android/app/google-services.json" ] && [ -s "android/app/google-services.json" ]; then
            echo "✓ google-services.json already exists in repository"
          elif [ -n "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" ]; then
            echo "Writing google-services.json from secret..."
            echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 -d > android/app/google-services.json
          fi
          test -s android/app/google-services.json || (echo "ERROR: google-services.json missing/empty" && exit 1)

      - name: Build Android APK
        shell: bash
        run: |
          set -euo pipefail
          flutter build apk --release \
            --dart-define=FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} \
            --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --dart-define=FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} \
            --dart-define=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
            --dart-define=FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
            --dart-define=FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }} \
            --dart-define=FIREBASE_APP_ID_ANDROID=${{ secrets.FIREBASE_APP_ID_ANDROID }} \
            --dart-define=FIREBASE_VAPID_KEY=${{ secrets.FIREBASE_VAPID_KEY }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: android-artifact
          path: build/app/outputs/flutter-apk/app-release.apk

  ios:
    name: iOS IPA
    runs-on: macos-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/ios-v')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'))
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Write GoogleService-Info.plist
        shell: bash
        run: |
          # Check if file already exists (committed to repo)
          if [ -f "ios/Runner/GoogleService-Info.plist" ] && [ -s "ios/Runner/GoogleService-Info.plist" ]; then
            echo "✓ GoogleService-Info.plist already exists in repository"
          elif [ -n "${{ secrets.GOOGLESERVICE_INFO_PLIST_B64 }}" ]; then
            echo "Writing GoogleService-Info.plist from secret..."
            echo "${{ secrets.GOOGLESERVICE_INFO_PLIST_B64 }}" | base64 -d > ios/Runner/GoogleService-Info.plist
          fi
          test -s ios/Runner/GoogleService-Info.plist || (echo "ERROR: GoogleService-Info.plist missing/empty" && exit 1)
          echo "GoogleService-Info.plist ready ($(wc -c < ios/Runner/GoogleService-Info.plist) bytes)"

      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install Provisioning Profile
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          # Create provisioning profile directory
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          
          # Import provisioning profile from secrets
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Extract UUID from provisioning profile
          PROVISIONING_PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          echo "Provisioning Profile UUID: $PROVISIONING_PROFILE_UUID"

      - name: CocoaPods setup
        run: |
          cd ios
          pod repo update
          pod install
          cd ..

      - name: Build Signed iOS IPA
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        shell: bash
        run: |
          set -euo pipefail
          
          # Build the IPA with signing
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist \
            --dart-define=FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} \
            --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --dart-define=FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} \
            --dart-define=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
            --dart-define=FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
            --dart-define=FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }} \
            --dart-define=FIREBASE_APP_ID_IOS=${{ secrets.FIREBASE_APP_ID_IOS }} \
            --dart-define=FIREBASE_VAPID_KEY=${{ secrets.FIREBASE_VAPID_KEY }}
          
          # Verify IPA was created
          if [ -f "build/ios/ipa/*.ipa" ]; then
            echo "✓ IPA file created successfully"
            ls -la build/ios/ipa/
          else
            echo "❌ IPA file not found, checking archive..."
            ls -la build/ios/archive/
            
            # If IPA wasn't created but archive exists, export it manually
            if [ -d "build/ios/archive/Runner.xcarchive" ]; then
              echo "Exporting IPA from archive..."
              xcodebuild -exportArchive \
                -archivePath build/ios/archive/Runner.xcarchive \
                -exportPath build/ios/ipa \
                -exportOptionsPlist ios/ExportOptions.plist \
                -allowProvisioningUpdates
            fi
          fi

      - name: Clean up keychain
        if: always()
        run: |
          if [ -f "$RUNNER_TEMP/app-signing.keychain-db" ]; then
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ios-artifact
          path: |
            build/ios/ipa/*.ipa
            build/ios/archive/*.xcarchive