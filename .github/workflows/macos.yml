name: Build and Release macOS App

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
      - 'macos-v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.9.4)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: macos-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
        cache: true
    
    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: |
          ~/.cocoapods
          macos/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Setup certificates for code signing
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.CSC_LINK }}
        P12_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH="$RUNNER_TEMP/build_certificate.p12"
        KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
        
        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Import certificate to keychain
        security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"
        
        # Find the signing identity
        security find-identity -v -p codesigning "$KEYCHAIN_PATH"
    
    - name: Build macOS app with code signing
      env:
        TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Build the Flutter macOS app with optimizations
        flutter build macos --release \
          --build-name=0.9.3 \
          --build-number=${{ github.run_number }} \
          --no-tree-shake-icons \
          --dart-define=FLUTTER_BUILD_MODE=release
        
        # Re-sign the app bundle with Developer ID certificate
        codesign --deep --force --verify --verbose \
          --sign "Developer ID Application: Frank Cottone ($TEAM_ID)" \
          --options runtime \
          --entitlements macos/Runner/Release.entitlements \
          "build/macos/Build/Products/Release/teacher_dashboard_flutter.app"
        
        # Verify the signature
        codesign --verify --verbose "build/macos/Build/Products/Release/teacher_dashboard_flutter.app"
    
    - name: Create signed DMG
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Create a DMG with proper volume settings
        create-dmg \
          --volname "Fermi" \
          --volicon "macos/Runner/Assets.xcassets/AppIcon.appiconset/512.png" \
          --window-pos 200 120 \
          --window-size 800 529 \
          --icon-size 130 \
          --icon "teacher_dashboard_flutter.app" 260 250 \
          --hide-extension "teacher_dashboard_flutter.app" \
          --app-drop-link 540 250 \
          --codesign "Developer ID Application: Frank Cottone (${{ secrets.APPLE_TEAM_ID }})" \
          "Fermi.dmg" \
          "build/macos/Build/Products/Release/"
    
    
    - name: Notarize DMG
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        NOTARY_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Submit DMG for notarization
        echo "Submitting DMG for notarization..."
        xcrun notarytool submit \
          --team-id "$TEAM_ID" \
          --apple-id "$APPLE_ID" \
          --password "$NOTARY_PASSWORD" \
          --wait \
          Fermi.dmg
        
        # Staple the notarization ticket
        echo "Stapling notarization ticket to DMG..."
        xcrun stapler staple Fermi.dmg
        
        # Verify notarization
        echo "Verifying notarization..."
        spctl -a -t open --context context:primary-signature -v Fermi.dmg
    
    
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: Fermi-macOS-DMG
        path: Fermi.dmg
        retention-days: 7
    
    
    - name: Clean up keychain
      if: always()
      run: |
        if [[ -f "$RUNNER_TEMP/app-signing.keychain-db" ]]; then
          security delete-keychain "$RUNNER_TEMP/app-signing.keychain-db"
        fi

  create-release:
    name: Create GitHub Release
    needs: build-and-sign
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Download DMG artifact
        uses: actions/download-artifact@v4
        with:
          name: Fermi-macOS-DMG
          path: ./
      
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version || '0.9.4' }}"
          else
            TAG="${{ github.ref_name }}"
            VERSION=${TAG#v}
            VERSION=${VERSION#macos-v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('macos-v{0}', steps.get_version.outputs.version) || github.ref_name }}
          name: Fermi macOS v${{ steps.get_version.outputs.version }}
          body: |
            ## ðŸŽ‰ Fermi Education Platform - macOS Release v${{ steps.get_version.outputs.version }}
            
            ### ðŸ“¦ Installation
            
            Download the installer below:
            - **Fermi.dmg** - Drag and drop installer
            
            The installer is signed and notarized by Apple.
            
            ### System Requirements
            - macOS 10.15 (Catalina) or later
            - Apple Silicon (M1/M2/M3) or Intel processor
            - 500 MB free disk space
            
            ### Features
            - âœ… Google Sign-In support
            - âœ… Apple Sign-In support  
            - âœ… Real-time messaging
            - âœ… Video/voice calling
            - âœ… File upload/download
            - âœ… Push notifications
            - âœ… Offline support
            
            ### What's Changed
            See the auto-generated release notes below for details.
          files: |
            Fermi.dmg
          generate_release_notes: true
          draft: false
          prerelease: false