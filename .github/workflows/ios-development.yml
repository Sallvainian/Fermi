name: iOS Development Build

on:
  workflow_dispatch:
    inputs:
      flutter_version:
        description: 'Flutter version'
        required: false
        default: '3.32.7'
        type: string
      xcode_version:
        description: 'Xcode version (e.g., 15.2, 14.3.1, latest)'
        required: false
        default: '15.2'
        type: string
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - profile
          - release
      simulator_build:
        description: 'Build for simulator'
        required: true
        default: true
        type: boolean
      clean_build:
        description: 'Clean build (delete derived data)'
        required: false
        default: false
        type: boolean
      verbose_logs:
        description: 'Enable verbose logging'
        required: false
        default: false
        type: boolean

jobs:
  build-ios-dev:
    name: iOS Dev Build (${{ inputs.build_type }})
    runs-on: macos-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ inputs.xcode_version }}
      
      - name: Print environment info
        run: |
          echo "### Environment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| macOS | $(sw_vers -productVersion) |" >> $GITHUB_STEP_SUMMARY
          echo "| Xcode | $(xcodebuild -version | head -1) |" >> $GITHUB_STEP_SUMMARY
          echo "| Swift | $(swift --version | head -1 | cut -d' ' -f4) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          xcodebuild -version
          xcodebuild -showsdks
          xcrun simctl list devices available
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          channel: 'stable'
          cache: true
      
      - name: Flutter doctor
        run: |
          flutter doctor -v
          flutter --version
      
      - name: Clean build environment
        if: inputs.clean_build
        run: |
          echo "Cleaning build environment..."
          cd ios
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf Pods
          rm -rf .symlinks
          rm -rf Flutter/Flutter.framework
          rm -rf Flutter/Flutter.podspec
          rm -rf Podfile.lock
          cd ..
          flutter clean
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Verify and prepare patches
        run: |
          # Ensure patch script is executable
          if [ -f scripts/patch_flutter_webrtc.sh ]; then
            chmod +x scripts/patch_flutter_webrtc.sh
            echo "flutter_webrtc patch script is ready"
          fi
          
      - name: Setup Ruby and CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: false
      
      - name: Install CocoaPods
        run: |
          gem install cocoapods -v 1.15.2
          pod --version
          
      - name: Pod install with detailed logging
        working-directory: ios
        run: |
          if [ "${{ inputs.verbose_logs }}" == "true" ]; then
            pod install --verbose
          else
            pod install
          fi
          
          # Verify patch was applied
          if [ -f "$HOME/.pub-cache/hosted/pub.dev/flutter_webrtc-0.14.2/ios/Classes/FlutterRTCMediaStream.m" ]; then
            echo "Checking flutter_webrtc patch..."
            grep -n "defined(__IPHONE_17_0)" "$HOME/.pub-cache/hosted/pub.dev/flutter_webrtc-0.14.2/ios/Classes/FlutterRTCMediaStream.m" || echo "Patch may not be applied"
          fi
      
      - name: Build iOS app
        run: |
          BUILD_FLAGS="--no-codesign --dart-define=CI_BUILD=true --build-number=${{ github.run_number }}"
          BUILD_FLAGS="$BUILD_FLAGS --dart-define=FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}"
          BUILD_FLAGS="$BUILD_FLAGS --dart-define=FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}"
          BUILD_FLAGS="$BUILD_FLAGS --dart-define=FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
          BUILD_FLAGS="$BUILD_FLAGS --dart-define=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}"
          BUILD_FLAGS="$BUILD_FLAGS --dart-define=FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}"
          BUILD_FLAGS="$BUILD_FLAGS --dart-define=FIREBASE_APP_ID_IOS=${{ secrets.FIREBASE_APP_ID_IOS }}"
          BUILD_FLAGS="$BUILD_FLAGS --dart-define=IOS_BUNDLE_ID=${{ secrets.IOS_BUNDLE_ID }}"
          
          if [ "${{ inputs.simulator_build }}" == "true" ]; then
            BUILD_FLAGS="$BUILD_FLAGS --simulator"
          fi
          
          if [ "${{ inputs.verbose_logs }}" == "true" ]; then
            BUILD_FLAGS="$BUILD_FLAGS --verbose"
          fi
          
          flutter build ios --${{ inputs.build_type }} $BUILD_FLAGS
      
      - name: Archive Xcode project
        if: always()
        run: |
          echo "Creating Xcode project archive for debugging..."
          tar -czf xcode-project.tar.gz \
            --exclude='*.ipa' \
            --exclude='*.app' \
            --exclude='build' \
            --exclude='DerivedData' \
            ios/Runner.xcodeproj \
            ios/Runner.xcworkspace \
            ios/Podfile \
            ios/Podfile.lock \
            ios/Runner/Info.plist \
            ios/Flutter/
            
      - name: Archive build logs
        if: failure()
        run: |
          mkdir -p build_logs
          
          # Collect various log files
          find . -name "*.log" -type f -exec cp {} build_logs/ \; 2>/dev/null || true
          
          # Collect Xcode build logs
          if [ -d ~/Library/Logs/gym ]; then
            cp -r ~/Library/Logs/gym/* build_logs/ 2>/dev/null || true
          fi
          
          # Create archive
          tar -czf build-logs.tar.gz build_logs/
          
      - name: Upload build output
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ios-${{ inputs.build_type }}-${{ inputs.simulator_build && 'simulator' || 'device' }}-${{ github.run_number }}
          path: |
            build/ios/
            !build/ios/iphoneos/*.dSYM
          retention-days: 7
          
      - name: Upload Xcode project archive
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: xcode-project-${{ github.run_number }}
          path: xcode-project.tar.gz
          retention-days: 3
          
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ github.run_number }}
          path: build-logs.tar.gz
          retention-days: 7
          
      - name: Generate summary
        if: always()
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter Version: ${{ inputs.flutter_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Xcode Version: ${{ inputs.xcode_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Target: ${{ inputs.simulator_build && 'Simulator' || 'Device' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Clean Build: ${{ inputs.clean_build }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Build completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the artifacts for debugging information." >> $GITHUB_STEP_SUMMARY
          fi