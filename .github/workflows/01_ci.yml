name: CI - Code Quality & Dead Code Detection
on:
  pull_request:
    branches: [ master ]
    
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
  
permissions:
  contents: read
  
jobs:
  validate:
    name: Validate & Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.0'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze --no-fatal-infos

      - name: Check formatting
        run: dart format --set-exit-if-changed .
      
      - name: Install dead_code_analyzer
        run: dart pub global activate dead_code_analyzer
        
      - name: Run dead code analysis
        run: |
          echo "=== Dead Code Analysis Report ===" 
          echo "Analyzing for unused classes, functions, and variables..."
          echo "Analyzing only lib/ directory (skipping android, ios, web, etc.)"
          dead_code_analyzer -p lib --no-progress --analyze-functions --max-unused 50 || true
        continue-on-error: true
        
      - name: Save dead code report
        if: github.event_name == 'pull_request'
        run: |
          dead_code_analyzer -p lib --no-progress --analyze-functions --max-unused 100 -o . > dead_code_report.txt 2>&1 || true
          echo "### Dead Code Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat dead_code_report.txt | head -100 >> $GITHUB_STEP_SUMMARY || echo "No dead code report generated" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  claude-architecture-analysis:
    name: Claude Architecture Analysis
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.24.0'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Claude Architecture Review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_args: |
            --system-prompt "You are a Flutter architecture expert analyzing codebases for technical debt, design patterns, and improvement opportunities."
            --allowedTools "Bash(flutter analyze),Bash(dart analyze),Bash(grep)"
            --focus architecture,patterns,technical-debt
            --max-tokens 6000
          settings: |
            {
              "mcpServers": {
                "context7": {
                  "command": "npx",
                  "args": ["@context7/mcp-server", "start"],
                  "includeTools": [
                    "flutter_architecture",
                    "dart_patterns",
                    "clean_architecture",
                    "domain_driven_design"
                  ],
                  "env": {
                    "CONTEXT7_ANALYSIS_MODE": "architecture"
                  }
                },
                "sequential-thinking": {
                  "command": "npx",
                  "args": ["@sequential-thinking/mcp-server", "start"],
                  "env": {
                    "MAX_THINKING_STEPS": "15",
                    "FOCUS": "architecture_patterns"
                  }
                }
              }
            }
          prompt: |
            ## Architecture Analysis Task

            Analyze the Flutter project architecture and provide insights on:

            ### 1. Architecture Evaluation
            - Current architecture pattern (Clean Architecture, DDD, MVC, etc.)
            - Consistency in pattern implementation
            - Separation of concerns assessment
            - Dependency flow analysis

            ### 2. Technical Debt Assessment
            - Code duplication areas
            - Overly complex components
            - Tight coupling issues
            - Missing abstractions

            ### 3. Design Pattern Usage
            - Repository pattern implementation
            - Service/Provider patterns
            - Factory patterns
            - Singleton usage

            ### 4. Improvement Opportunities
            - Refactoring suggestions
            - Module boundary improvements
            - Testing structure enhancements
            - Performance optimization areas

            ### 5. Firebase & State Management
            - Firebase service organization
            - Provider usage patterns
            - State management efficiency
            - Data flow optimization

            Focus on the lib/ directory structure:
            - lib/features/* - Feature modules
            - lib/shared/* - Shared components
            - lib/core/* - Core utilities

            Provide actionable recommendations with priority levels.
