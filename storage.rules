rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Temporary: Allow all authenticated users to read/write
    // TODO: Remove this after testing
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
    
    // User profile images - users can read/write their own
    match /users/{userId}/profile/{allPaths=**} {
      allow read: if true; // Profile images are public
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Class materials - teachers can upload, students can read
    match /classes/{classId}/materials/{allPaths=**} {
      allow read: if request.auth != null && hasClassAccess(classId);
      allow write: if request.auth != null && isTeacherOfClass(classId);
    }
    
    // Student submissions - students can upload their own, teachers can read
    match /classes/{classId}/submissions/{studentId}/{allPaths=**} {
      allow read: if request.auth != null && 
        (request.auth.uid == studentId || isTeacherOfClass(classId));
      allow write: if request.auth != null && request.auth.uid == studentId;
    }
    
    // Shared files - based on file permissions in Firestore
    match /shared/{fileId}/{allPaths=**} {
      allow read: if request.auth != null && hasFilePermission(fileId, 'read');
      allow write: if request.auth != null && hasFilePermission(fileId, 'write');
    }
    
    // Chat attachments - conversation participants only
    match /conversations/{conversationId}/attachments/{allPaths=**} {
      allow read, write: if request.auth != null && 
        isConversationParticipant(conversationId);
    }
    
    // Chat media (images and videos) - organized by chat room
    match /chat_media/{chatRoomId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && request.resource.size < 100 * 1024 * 1024 // 100MB limit
        && (request.resource.contentType.matches('image/.*') || 
            request.resource.contentType.matches('video/.*'));
    }
    
    // Game assets - teachers can upload, all can read
    match /games/{gameId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasRole('teacher');
    }
    
    // Helper functions
    function hasRole(role) {
      return firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function hasClassAccess(classId) {
      let classData = firestore.get(/databases/(default)/documents/classes/$(classId)).data;
      return request.auth.uid == classData.teacherId || 
             request.auth.uid in classData.studentIds;
    }
    
    function isTeacherOfClass(classId) {
      return firestore.get(/databases/(default)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
    }
    
    function hasFilePermission(fileId, permission) {
      let fileData = firestore.get(/databases/(default)/documents/files/$(fileId)).data;
      return request.auth.uid in fileData.permissions[permission];
    }
    
    function isConversationParticipant(conversationId) {
      return request.auth.uid in firestore.get(/databases/(default)/documents/conversations/$(conversationId)).data.participants;
    }
  }
}