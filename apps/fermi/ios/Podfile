# Uncomment this line to define a global platform for your project
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!
  
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Fix 1: Remove duplicate -lc++ libraries by managing OTHER_LDFLAGS
    # This addresses the "Ignoring duplicate libraries: '-lc++'" warnings
    target.build_configurations.each do |config|
      if config.build_settings['OTHER_LDFLAGS']
        flags = config.build_settings['OTHER_LDFLAGS']
        if flags.is_a?(Array)
          # Remove duplicate -lc++ entries
          flags = flags.uniq
        elsif flags.is_a?(String)
          # Convert to array, remove duplicates, convert back
          flag_array = flags.split(' ').uniq
          flags = flag_array.join(' ')
        end
        config.build_settings['OTHER_LDFLAGS'] = flags
      end
    end
    
    # Fix 2: Add outputs to script phases to prevent running every build
    # This addresses the "Run script build phases without output" warnings
    target.build_phases.each do |phase|
      if phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
        if phase.name && (phase.name.include?('Create Symlinks') || phase.name.include?('Copy Pods Resources'))
          # Add dummy output file to prevent running every build
          if phase.output_paths.empty?
            phase.output_paths = ['$(DERIVED_FILE_DIR)/$(PRODUCT_NAME)-script-phase.txt']
          end
        end
      end
    end
    
    # CRITICAL FIX: leveldb C++ compilation with Xcode 16.4
    if target.name == 'leveldb-library'
      target.build_configurations.each do |config|
        # Fix for App Store submission: Ensure CFBundleShortVersionString is set
        config.build_settings['MARKETING_VERSION'] = '1.22.6'
        config.build_settings['CURRENT_PROJECT_VERSION'] = '1'
        
        # Use C++17 standard (required for modern C++ features)
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        
        # CRITICAL: Fix header search paths to find C++ standard library headers
        # Add all necessary paths for C++ headers including system headers
        config.build_settings['HEADER_SEARCH_PATHS'] = [
          '$(inherited)',
          '"${PODS_TARGET_SRCROOT}/include"',
          '"${PODS_TARGET_SRCROOT}"',
          '"$(SDKROOT)/usr/include/c++/v1"',
          '"$(SDKROOT)/usr/include"',
          '"$(TOOLCHAIN_DIR)/usr/include/c++/v1"',
          '"$(TOOLCHAIN_DIR)/usr/include"'
        ].join(' ')
        
        # CRITICAL: Add system header search paths for C++ standard library
        config.build_settings['SYSTEM_HEADER_SEARCH_PATHS'] = [
          '$(inherited)',
          '"$(SDKROOT)/usr/include/c++/v1"',
          '"$(SDKROOT)/usr/include"',
          '"$(TOOLCHAIN_DIR)/usr/include/c++/v1"'
        ].join(' ')
        
        # Enable modules to help with C++ standard library
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['CLANG_MODULES_AUTOLINK'] = 'YES'
        
        # Required preprocessor definitions for leveldb
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'LEVELDB_IS_BIG_ENDIAN=0'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'LEVELDB_PLATFORM_POSIX=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'OS_MACOSX=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'LEVELDB_BUILD_TESTS=0'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'LEVELDB_BUILD_BENCHMARKS=0'
        
        # CRITICAL: C++ flags for proper compilation
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = [
          '$(inherited)',
          '-stdlib=libc++',
          '-std=c++17',
          '-fmodules',
          '-fcxx-modules',
          '-Wno-deprecated',
          '-Wno-unused-parameter'
        ].join(' ')
        
        # CRITICAL: Linker flags for C++ standard library
        config.build_settings['OTHER_LDFLAGS'] ||= '$(inherited)'
        config.build_settings['OTHER_LDFLAGS'] += ' -lc++'
        
        # Suppress warnings
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        
        # Module map settings
        config.build_settings['DEFINES_MODULE'] = 'YES'
        config.build_settings['GENERATE_INFOPLIST_FILE'] = 'YES'
        
        # Ensure Info.plist has all required keys for App Store
        config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = 'org.cocoapods.leveldb-library'
        config.build_settings['INFOPLIST_KEY_CFBundleShortVersionString'] = '1.22.6'
        
        # CRITICAL: Ensure proper C++ runtime
        config.build_settings['CLANG_ENABLE_OBJC_ARC'] = 'YES'
        config.build_settings['CLANG_ENABLE_OBJC_WEAK'] = 'YES'
      end
    end
    
    # Fix C++ template issues in gRPC with Xcode 16
    if target.name == 'gRPC-Core' || target.name == 'gRPC-C++' || target.name == 'abseil'
      target.build_configurations.each do |config|
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -std=c++17 -Wno-c++11-narrowing'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      end
    end
    
    # Fix for Xcode 16: Remove unsupported -G flag from BoringSSL-GRPC
    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          # Remove both -G and -GCC_WARN_INHIBIT_ALL_WARNINGS flags
          flags.reject! { |flag| flag == '-G' || flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end
    
    # Fix for gRPC-Core compilation with iOS 18 SDK
    if target.name == 'gRPC-Core'
      target.build_configurations.each do |config|
        # Use C++17 standard
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        
        # Suppress problematic warnings
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -Wno-comma -Wno-shorten-64-to-32 -Wno-nullability-completeness -Wno-deprecated-declarations'
        
        # Enable modules
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        
        # Fix preprocessor definitions
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GRPC_ARES=0'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'TARGET_OS_VISION=0'
      end
    end
    
    # Fix for FirebaseFirestoreInternal C++ compilation
    if target.name == 'FirebaseFirestoreInternal' || target.name == 'FirebaseFirestore'
      target.build_configurations.each do |config|
        # Enable C++ standard library and compiler settings
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        
        # Add necessary preprocessor definitions
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'PB_FIELD_32BIT=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'PB_NO_PACKED_STRUCTS=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'PB_ENABLE_MALLOC=1'
        
        # Disable specific warnings that cause issues
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -Wno-comma -Wno-shorten-64-to-32 -Wno-nullability-completeness'
        
        # Enable modules for better compatibility
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      end
    end
    
    # Additional fixes for gRPC and related dependencies
    if target.name.include?('gRPC') || target.name.include?('abseil') || target.name.include?('BoringSSL')
      target.build_configurations.each do |config|
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        
        # Disable warnings that cause issues
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -Wno-deprecated-declarations -Wno-unused-parameter -Wno-sign-compare'
        
        # Module settings
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      end
    end
    
    # Fix 3: Suppress quoted include warnings for Firebase frameworks
    # This addresses the double-quoted include warnings in framework headers
    if target.name.include?('Firebase') || target.name == 'FirebaseAppCheckInterop' || target.name == 'leveldb-library'
      target.build_configurations.each do |config|
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
      end
    end
    
    target.build_configurations.each do |config|
      # CRITICAL: Prevent provisioning profiles for Pods
      # Pods don't need code signing and it causes build failures
      config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
      config.build_settings.delete('PROVISIONING_PROFILE')
      config.build_settings.delete('CODE_SIGNING_IDENTITY')
      
      # Minimum iOS version
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      
      # Disable bitcode
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # CRITICAL: Suppress Swift 6 language mode and concurrency features
      # This addresses the 'sending' keyword and async issues
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
      config.build_settings['SWIFT_UPCOMING_FEATURE_CONCISE_MAGIC_FILE'] = 'NO'
      config.build_settings['SWIFT_DISABLE_SAFETY_CHECKS'] = 'YES'
      
      # Suppress warnings
      config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = 'YES'
      
      # Fix TARGET_OS_VISION for Firebase SDK
      if target.name.include?('Firebase') || target.name.include?('Google') || target.name.include?('Protobuf') || target.name.include?('gRPC') || target.name.include?('abseil')
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'TARGET_OS_VISION=0'
        
        # Allow non-modular includes
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        
        # Additional Swift flags to suppress errors
        config.build_settings['OTHER_SWIFT_FLAGS'] = '$(inherited) -Xcc -Wno-error=non-modular-include-in-framework-module -suppress-warnings'
        
        # Force module map generation
        config.build_settings['DEFINES_MODULE'] = 'YES'
        config.build_settings['GENERATE_MODULEMAP'] = 'YES'
      end
      
      # Special handling for PromisesSwift which has Swift 6 issues
      if target.name == 'PromisesSwift'
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
      end
      
      # Fix SwiftyGif Swift concurrency errors
      if target.name == 'SwiftyGif'
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
        config.build_settings['SWIFT_UPCOMING_FEATURE_CONCISE_MAGIC_FILE'] = 'NO'
        config.build_settings['OTHER_SWIFT_FLAGS'] = '$(inherited) -Xcc -Wno-error=non-isolated-async-calls'
      end
    end
  end
  
  # Additional fix for module issues
  installer.pods_project.build_configurations.each do |config|
    config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
  end
  
  # Fix Firebase Swift 6 syntax errors for older Xcode versions
  # This patches the invalid Swift 6 syntax that causes build failures
  
  # Fix FirebaseDataEncoder.swift
  firebase_encoder_path = File.join(installer.sandbox.root, 'FirebaseSharedSwift/FirebaseSharedSwift/Sources/third_party/FirebaseDataEncoder/FirebaseDataEncoder.swift')
  if File.exist?(firebase_encoder_path)
    content = File.read(firebase_encoder_path)
    if content.include?('throws -> sending Any')
      puts "Patching FirebaseDataEncoder.swift to fix 'sending' keyword syntax error..."
      patched_content = content.gsub('throws -> sending Any', 'throws -> Any')
      File.write(firebase_encoder_path, patched_content)
      puts "✅ FirebaseDataEncoder.swift patched successfully"
    end
  end
  
  # Fix UnfairLock.swift Swift 6 keywords (sending, borrowing, consuming)
  unfair_lock_path = File.join(installer.sandbox.root, 'FirebaseCoreInternal/FirebaseCore/Internal/Sources/Utilities/UnfairLock.swift')
  if File.exist?(unfair_lock_path) && File.writable?(unfair_lock_path)
    content = File.read(unfair_lock_path)
    if content.include?('consuming sending') || content.include?('borrowing func')
      puts "Patching UnfairLock.swift to fix Swift 6 keywords..."
      begin
        patched_content = content
          .gsub('consuming sending', '')
          .gsub('inout sending', 'inout')
          .gsub('-> sending', '->')
          .gsub('borrowing func', 'func')
          .gsub('private import', 'import')
        File.write(unfair_lock_path, patched_content)
        puts "✅ UnfairLock.swift patched successfully"
      rescue => e
        puts "⚠️  Could not patch UnfairLock.swift: #{e.message}"
      end
    end
  end
end
