I need you to help improve a Flutter/Firebase application called "Teacher Dashboard" that helps teachers manage classrooms, students, assignments, and grades. The project is in pre-MVP stage (~40% complete) and was migrated from SvelteKit+Supabase to Flutter+Firebase.

Use the Zen MCP tool to analyze and implement the following improvements, prioritized by importance:

## HIGH PRIORITY IMPROVEMENTS

1. Architecture and Structure
   - Create a centralized FirestoreService class to handle CRUD operations and move duplicate logic from individual services
   - Implement proper dependency injection using get_it or provider
   - Create a centralized error handling system with Crashlytics integration

2. Code Quality
   - Remove all print statements and replace with proper logging
   - Fix linting issues by running flutter analyze
   - Remove hardcoded values (especially Google client ID in auth_service.dart)

3. Security Enhancements
   - Improve Firestore security rules with data validation
   - Implement email verification requirement
   - Enforce password complexity requirements

4. Performance Optimization
   - Configure Firestore persistence for offline support
   - Reduce unnecessary real-time listeners
   - Implement pagination for large collections

## IMPLEMENTATION APPROACH

For each task:
1. Analyze the current code structure
2. Plan your changes by identifying files that need modification
3. Implement changes incrementally
4. Test your implementation
5. Document your changes
6. Mark completed tasks in docs/tasks.md

## DETAILED TASK LIST

A complete list of 40 improvement tasks is available in docs/tasks.md. After completing the high-priority items, continue with other tasks from this list.

## PROJECT STRUCTURE

The project follows standard Flutter architecture:
- lib/main.dart: App entry point
- lib/models/: Data models
- lib/services/: Business logic
- lib/providers/: State management
- lib/screens/: UI screens
- lib/widgets/: Reusable components
- lib/theme/: App theming
- lib/utils/: Helper functions

## DELIVERABLES

For each completed task, provide:
1. Summary of changes made
2. Files modified
3. How your changes improve the codebase
4. Any limitations or issues
5. Suggestions for further improvements

Focus on making incremental, testable improvements that follow Flutter and Dart best practices while ensuring backward compatibility with existing features.