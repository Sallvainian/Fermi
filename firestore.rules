rules_version = '2';
// PRODUCTION VERSION - Secure rules for live deployment
// Last updated: 2025-01-14
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to get user role from database (with caching)
    function getUserRole(userId) {
      let doc = get(/databases/$(database)/documents/users/$(userId));
      return doc != null && doc.data != null && doc.data.role != null ? doc.data.role : null;
    }
    
    // Helper function to check if user is THE teacher
    function isTheTeacher() {
      let role = getUserRole(request.auth.uid);
      return isAuthenticated() && role != null && role == 'teacher';
    }
    
    // Helper function to check if user is a student
    function isStudent() {
      let role = getUserRole(request.auth.uid);
      return isAuthenticated() && role != null && role == 'student';
    }
    
    // Helper function to check if student is enrolled in a class
    function isEnrolledInClass(classId) {
      return isStudent() && 
        request.auth.uid in get(/databases/$(database)/documents/classes/$(classId)).data.studentIds;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile, teachers can read all, students can read limited info
      // CRITICAL: Allow users without roles to read their own data during OAuth setup
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && resource != null && resource.data.role == 'teacher') ||
                     (isAuthenticated() && resource != null && resource.data.keys().hasAll(['displayName', 'role', 'photoURL']));
      // Users can only write their own document (including initial creation)
      allow write: if isOwner(userId);
    }
    
    // Pending users - temporary data during signup
    match /pending_users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Classes - secured access with enrollment validation
    match /classes/{classId} {
      // Allow read if:
      // - User is the teacher OR
      // - Document doesn't exist (checking before creation) OR
      // - Student is enrolled OR
      // - Student checking enrollment code
      allow read: if isTheTeacher() || 
                     resource == null ||
                     (isStudent() && 
                      (request.auth.uid in resource.data.studentIds ||
                       // Allow reading for enrollment code validation only
                       (resource.data.enrollmentCode != null && 
                        request.auth.token.email_verified == true)));
      
      // Only THE teacher can create classes
      allow create: if isTheTeacher() && 
                       request.resource.data.teacherId == request.auth.uid;
      
      // Updates allowed for teacher or student self-enrollment
      allow update: if isTheTeacher() || 
                       (isStudent() && 
                        request.auth.token.email_verified == true &&
                        // Only allow adding self to studentIds, not removing others
                        request.auth.uid in request.resource.data.studentIds &&
                        request.resource.data.studentIds.hasAll(resource.data.studentIds) &&
                        // Prevent modifying other fields
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['studentIds']));
         
      // Only THE teacher can delete classes
      allow delete: if isTheTeacher() && resource.data.teacherId == request.auth.uid;
      
      // Nested collections in classes
      match /{document=**} {
        allow read: if isTheTeacher() || isEnrolledInClass(classId);
        allow write: if isTheTeacher();
      }
    }
    
    // Messages and conversations (legacy - being phased out)
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participants &&
                       request.auth.token.email_verified == true;
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants &&
                       // Prevent removing other participants
                       request.resource.data.participants.hasAll(resource.data.participants);
      allow delete: if false; // Never allow deletion
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                      request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isAuthenticated() && 
                        request.auth.uid == request.resource.data.senderId &&
                        request.auth.token.email_verified == true;
        allow update: if false; // Messages are immutable
        allow delete: if false; // Messages cannot be deleted
      }
    }
    
    // Chat rooms (primary chat implementation)
    match /chat_rooms/{chatRoomId} {
      // Allow read if authenticated AND either:
      // - User is the teacher OR
      // - Document doesn't exist (for checking before creation) OR  
      // - User is in participantIds
      allow read: if isAuthenticated() && 
                     (isTheTeacher() || 
                      resource == null ||
                      request.auth.uid in resource.data.participantIds);
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participantIds &&
                       request.auth.token.email_verified == true;
      allow update: if isAuthenticated() && 
                       (isTheTeacher() || request.auth.uid in resource.data.participantIds) &&
                       // Prevent removing other participants unless teacher
                       (isTheTeacher() || request.resource.data.participantIds.hasAll(resource.data.participantIds));
      allow delete: if false; // Don't allow deletion
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                      request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.participantIds;
        allow create: if isAuthenticated() && 
                        request.auth.uid == request.resource.data.senderId &&
                        request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.participantIds &&
                        request.auth.token.email_verified == true;
        allow update: if false; // Messages are immutable
        allow delete: if isTheTeacher() || 
                        (isAuthenticated() && request.auth.uid == resource.data.senderId);
      }
    }
    
    // Assignments - secured with class enrollment validation
    match /assignments/{assignmentId} {
      // Students can only read assignments for classes they're enrolled in
      allow read: if isTheTeacher() || 
                     resource == null ||
                     (isStudent() && resource.data.classId != null && isEnrolledInClass(resource.data.classId));
      
      // Only THE teacher can create assignments
      allow create: if isTheTeacher() && 
                       request.resource.data.teacherId == request.auth.uid;
      
      // Only THE teacher can update or delete assignments
      allow update: if isTheTeacher() && 
                       resource.data.teacherId == request.auth.uid;
      allow delete: if isTheTeacher() && 
                       resource.data.teacherId == request.auth.uid;
    }
    
    // Grades - strict access control
    match /grades/{gradeId} {
      // Students can only read their own grades, teacher can read all
      allow read: if isTheTeacher() || 
                     resource == null ||
                     (isStudent() && resource.data.studentId != null && request.auth.uid == resource.data.studentId);
      
      // Only THE teacher can manage grades
      allow create: if isTheTeacher() && 
                       request.resource.data.teacherId == request.auth.uid;
      allow update: if isTheTeacher() && 
                       resource.data.teacherId == request.auth.uid;
      allow delete: if isTheTeacher() && 
                       resource.data.teacherId == request.auth.uid;
    }
    
    // Collection group queries for grades (teacher analytics only)
    match /{path=**}/grades/{gradeId} {
      allow read: if isTheTeacher();
    }
    
    // Submissions - students submit, teacher reviews
    match /submissions/{submissionId} {
      // Read access for owner or teacher
      allow read: if isTheTeacher() || 
                     resource == null ||
                     (isStudent() && resource.data.studentId != null && request.auth.uid == resource.data.studentId);
      
      // Students can create their own submissions with email verification
      allow create: if isStudent() && 
                       request.auth.uid == request.resource.data.studentId &&
                       request.auth.token.email_verified == true;
      
      // Students can update only if not submitted, teacher can always update (for grading)
      allow update: if (isStudent() && 
                        request.auth.uid == resource.data.studentId && 
                        resource.data.submittedAt == null &&
                        // Prevent changing studentId
                        request.resource.data.studentId == resource.data.studentId) ||
                       isTheTeacher();
        
      // Only teacher can delete submissions
      allow delete: if isTheTeacher();
    }
    
    // Announcements - students can read, only teacher can write
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isTheTeacher();
    }
    
    // Discussion Boards - authenticated users can participate
    match /discussionBoards/{boardId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.auth.token.email_verified == true;
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.createdBy;
      allow delete: if isTheTeacher() || 
                       (isAuthenticated() && request.auth.uid == resource.data.createdBy);
                       
      // Discussion threads within boards
      match /threads/{threadId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                         request.auth.token.email_verified == true;
        allow update: if isAuthenticated() && 
                         request.auth.uid == resource.data.authorId;
        allow delete: if isTheTeacher() || 
                         (isAuthenticated() && request.auth.uid == resource.data.authorId);
                         
        // Posts within threads
        match /posts/{postId} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated() && 
                           request.auth.token.email_verified == true;
          allow update: if isAuthenticated() && 
                           request.auth.uid == resource.data.authorId;
          allow delete: if isTheTeacher() || 
                           (isAuthenticated() && request.auth.uid == resource.data.authorId);
        }
      }
    }
    
    // Games - any authenticated user can read and create, only creator can update/delete
    match /games/{gameId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
        && resource.data.creatorId == request.auth.uid;
      
      // Scores - users can only create/update their own scores
      match /scores/{scoreId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.studentId;
        allow update: if request.auth != null 
          && request.auth.uid == resource.data.studentId;
      }
    }
    
    
    // Scheduled messages - secured with sender validation
    match /scheduled_messages/{messageId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.message.senderId;
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.message.senderId &&
                       request.auth.token.email_verified == true;
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.message.senderId &&
                       request.auth.uid == request.resource.data.message.senderId; // Can't change sender
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.message.senderId;
    }
    
    // Discussion boards - teacher creates boards, all users can read
    match /discussion_boards/{boardId} {
      allow read: if request.auth != null;
      allow create: if isTheTeacher();
      allow update: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
      allow delete: if false; // Don't allow deletion
      
      // Discussion threads
      match /threads/{threadId} {
        allow read: if request.auth != null;
        // Allow create if authenticated and setting self as author
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.authorId;
        allow update: if request.auth != null 
          && resource.data.authorId == request.auth.uid;
        allow delete: if request.auth != null 
          && (isTheTeacher() || resource.data.authorId == request.auth.uid);
        
        // Thread comments (used by the app for discussion replies)
        match /comments/{commentId} {
          allow read: if request.auth != null;
          // Allow create if authenticated and setting self as author
          allow create: if request.auth != null 
            && request.auth.uid == request.resource.data.authorId;
          allow update: if request.auth != null 
            && resource.data.authorId == request.auth.uid;
          allow delete: if request.auth != null 
            && (isTheTeacher() || resource.data.authorId == request.auth.uid);
        }
        
        // Thread replies (legacy - kept for compatibility)
        match /replies/{replyId} {
          allow read: if request.auth != null;
          // Allow create if authenticated and setting self as author
          allow create: if request.auth != null 
            && request.auth.uid == request.resource.data.authorId;
          allow update: if request.auth != null 
            && resource.data.authorId == request.auth.uid;
          allow delete: if request.auth != null 
            && (isTheTeacher() || resource.data.authorId == request.auth.uid);
        }
      }
    }
    
    // Calendar events - users can create/manage their own events, view if participants
    match /calendar_events/{eventId} {
      allow read: if request.auth != null 
        && (resource.data.createdBy == request.auth.uid 
          || request.auth.uid in resource.data.participantIds);
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
    }
    
    // Students collection - for student-specific data
    match /students/{studentId} {
      // Students can read their own data (by userId field), teacher can read all
      allow read: if request.auth != null && 
        (isTheTeacher() || 
         resource == null ||
         (isStudent() && (request.auth.uid == studentId || 
          (resource.data.userId != null && request.auth.uid == resource.data.userId))));
      
      // Students can update their own profile data
      allow update: if isStudent() && 
        (request.auth.uid == studentId || request.auth.uid == resource.data.userId);
      
      // Only teacher can create or delete student records
      allow create, delete: if isTheTeacher();
    }
    
    // Teachers collection - for teacher-specific data
    match /teachers/{teacherId} {
      // Only the teacher can read/write their own data
      allow read, write: if isTheTeacher() && request.auth.uid == teacherId;
    }
    
    // Calls collection - for video/voice calls
    match /calls/{callId} {
      // Allow read if authenticated AND either:
      // - Document doesn't exist (for checking before creation) OR
      // - User is a participant OR
      // - Call is ringing (for incoming calls)
      allow read: if isAuthenticated() && 
                     (resource == null ||
                      request.auth.uid == resource.data.callerId || 
                      request.auth.uid == resource.data.receiverId ||
                      resource.data.status == 'ringing');
      
      // Only authenticated users with verified email can create calls
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.callerId &&
                       request.auth.token.email_verified == true;
      
      // Allow participants to update call status
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.callerId || 
                        request.auth.uid == resource.data.receiverId) &&
                       // Only allow status transitions to ending states
                       (request.resource.data.status in ['ended', 'rejected', 'missed', 'answered'] || 
                        resource.data.status == 'ringing');
      
      // No deletion of call records
      allow delete: if false;
      
      // ICE candidates subcollection for WebRTC
      match /candidates/{userId}/candidates/{candidateId} {
        allow read, write: if isAuthenticated() && 
                             (request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId || 
                              request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.receiverId);
      }
    }
    
    // Activities collection - for dashboard recent activities
    match /activities/{activityId} {
      // Teachers can read activities where they are the teacher
      // Students can read activities for their classes
      allow read: if request.auth != null && 
        (isTheTeacher() || 
         resource == null ||
         (isStudent() && resource.data.classId != null && 
          request.auth.uid in get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.studentIds));
      
      // System or teacher can create activities
      allow create: if request.auth != null && 
        (isTheTeacher() || 
         request.resource.data.userId == request.auth.uid);
      
      // Activities cannot be updated or deleted
      allow update, delete: if false;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && 
        (resource == null ||
         request.auth.uid == resource.data.userId);
      
      // System or teacher can create notifications
      allow create: if request.auth != null && 
        (isTheTeacher() || 
         request.auth.uid == request.resource.data.userId);
      
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // FCM tokens - users can manage their own tokens
    match /fcm_tokens/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Bug reports collection
    match /bug_reports/{reportId} {
      // Only teachers can read bug reports (for admin purposes)
      allow read: if isTheTeacher();
      
      // Any authenticated user with verified email can create a bug report
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId &&
                       request.auth.token.email_verified == true;
      
      // Bug reports are immutable once submitted
      allow update, delete: if false;
    }
    
    // Default deny rule - explicitly deny any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// PRODUCTION RULES - Key Security Features:
// 1. Email verification required for content creation
// 2. Role-based access control with teacher/student separation
// 3. Immutable messages and audit records
// 4. Student enrollment validation for class content
// 5. Owner-only write access for user-generated content
// 6. No deletion of critical records (messages, calls, activities)
// 7. Default deny for unmatched paths