rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Any authenticated user can read user profiles (for chat user selection)
      allow read: if request.auth != null;
      // Users can only write their own document
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Pending users - temporary data during signup
    match /pending_users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Classes - authenticated users can read, only creator can write
    match /classes/{classId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
        && resource.data.teacherId == request.auth.uid;
      
      // Nested collections in classes
      match /{document=**} {
        allow read: if request.auth != null;
        allow write: if request.auth != null 
          && get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
      }
    }
    
    // Messages and conversations
    match /conversations/{conversationId} {
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // Chat rooms (new chat implementation)
    match /chat_rooms/{chatRoomId} {
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participantIds;
      allow delete: if false; // Don't allow deletion, only leaving
      
      match /messages/{messageId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.participantIds;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.senderId;
        allow update: if request.auth != null 
          && request.auth.uid == resource.data.senderId
          && request.resource.data.senderId == resource.data.senderId; // Can't change sender
        allow delete: if request.auth != null 
          && request.auth.uid == resource.data.senderId;
      }
    }
    
    // Assignments - authenticated users can read, only teacher can write
    match /assignments/{assignmentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
        && resource.data.teacherId == request.auth.uid;
    }
    
    // Grades - students can read their own, teachers can read/write all
    match /grades/{gradeId} {
      allow read: if request.auth != null 
        && (request.auth.uid == resource.data.studentId 
          || request.auth.uid == resource.data.teacherId);
      allow create, update: if request.auth != null 
        && request.auth.uid == request.resource.data.teacherId;
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.teacherId;
    }
    
    // Submissions - students can create/update their own, teachers can read all
    match /submissions/{submissionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.studentId;
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.studentId 
        && resource.data.submittedAt == null; // Can't update after submission
    }
    
    // Announcements - any authenticated user can read, only creator can write
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
        && resource.data.authorId == request.auth.uid;
    }
    
    // Games - any authenticated user can read, only creator can write
    match /games/{gameId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
        && resource.data.creatorId == request.auth.uid;
      
      // Scores - users can only create/update their own scores
      match /scores/{scoreId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.studentId;
        allow update: if request.auth != null 
          && request.auth.uid == resource.data.studentId;
      }
    }
  }
}