rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is THE teacher (you)
    function isTheTeacher() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    // Helper function to check if user is a student
    function isStudent() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    // Users collection
    match /users/{userId} {
      // Any authenticated user can read user profiles (for chat user selection)
      allow read: if request.auth != null;
      // Users can only write their own document
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Pending users - temporary data during signup
    match /pending_users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Classes - students can read their classes, only teacher can write
    match /classes/{classId} {
      // Students can read classes they're enrolled in, teacher can read all
      allow read: if request.auth != null && 
        (isTheTeacher() || 
         (isStudent() && request.auth.uid in resource.data.studentIds));
      
      // Only THE teacher can create, update, or delete classes
      allow create: if isTheTeacher();
      allow update, delete: if isTheTeacher();
      
      // Nested collections in classes
      match /{document=**} {
        allow read: if request.auth != null && 
          (isTheTeacher() || 
           (isStudent() && request.auth.uid in get(/databases/$(database)/documents/classes/$(classId)).data.studentIds));
        allow write: if isTheTeacher();
      }
    }
    
    // Messages and conversations
    match /conversations/{conversationId} {
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // Chat rooms (new chat implementation)
    match /chat_rooms/{chatRoomId} {
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participantIds;
      allow delete: if false; // Don't allow deletion, only leaving
      
      match /messages/{messageId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.participantIds;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.senderId;
        allow update: if request.auth != null 
          && request.auth.uid == resource.data.senderId
          && request.resource.data.senderId == resource.data.senderId; // Can't change sender
        allow delete: if request.auth != null 
          && request.auth.uid == resource.data.senderId;
      }
    }
    
    // Assignments - students can read their class assignments, only teacher can write
    match /assignments/{assignmentId} {
      // Students can read assignments for classes they're enrolled in
      allow read: if request.auth != null && 
        (isTheTeacher() || 
         (isStudent() && request.auth.uid in get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.studentIds));
      
      // Only THE teacher can create, update, or delete assignments
      allow create: if isTheTeacher();
      allow update, delete: if isTheTeacher();
    }
    
    // Grades - students can read their own, only THE teacher can write
    match /grades/{gradeId} {
      // Students can only read their own grades, teacher can read all
      allow read: if request.auth != null && 
        (isTheTeacher() || 
         (isStudent() && request.auth.uid == resource.data.studentId));
      
      // Only THE teacher can create, update, or delete grades
      allow create, update, delete: if isTheTeacher();
    }
    
    // Collection group queries for grades (needed for analytics)
    match /{path=**}/grades/{gradeId} {
      allow read: if request.auth != null && isTheTeacher();
    }
    
    // Submissions - students can read/write their own, teacher can read all
    match /submissions/{submissionId} {
      // Students can read their own submissions, teacher can read all
      allow read: if request.auth != null && 
        (isTheTeacher() || 
         (isStudent() && request.auth.uid == resource.data.studentId));
      
      // Students can create their own submissions
      allow create: if isStudent() && 
        request.auth.uid == request.resource.data.studentId;
      
      // Students can update their own submissions only if not yet submitted
      allow update: if isStudent() && 
        request.auth.uid == resource.data.studentId && 
        resource.data.submittedAt == null;
        
      // Only teacher can delete submissions
      allow delete: if isTheTeacher();
    }
    
    // Announcements - students can read, only teacher can write
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isTheTeacher();
    }
    
    // Games - any authenticated user can read and create, only creator can update/delete
    match /games/{gameId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
        && resource.data.creatorId == request.auth.uid;
      
      // Scores - users can only create/update their own scores
      match /scores/{scoreId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null 
          && request.auth.uid == request.resource.data.studentId;
        allow update: if request.auth != null 
          && request.auth.uid == resource.data.studentId;
      }
    }
    
    // Chat rooms - users can only access rooms they're participants in
    match /chat_rooms/{roomId} {
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participantIds;
      allow delete: if false; // Don't allow deletion of chat rooms
      
      // Messages within chat rooms
      match /messages/{messageId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.participantIds;
        allow create: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.participantIds
          && request.auth.uid == request.resource.data.senderId;
        allow update: if false; // Messages should not be edited
        allow delete: if request.auth != null 
          && request.auth.uid == resource.data.senderId;
      }
    }
    
    // Scheduled messages - users can only manage their own scheduled messages
    match /scheduled_messages/{messageId} {
      allow read: if request.auth != null 
        && request.auth.uid == resource.data.message.senderId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.message.senderId;
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.message.senderId;
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.message.senderId
        && request.auth.uid == request.resource.data.message.senderId; // Can't change sender
    }
    
    // Discussion boards - teacher creates boards, all users can read
    match /discussion_boards/{boardId} {
      allow read: if request.auth != null;
      allow create: if isTheTeacher();
      allow update: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
      allow delete: if false; // Don't allow deletion
      
      // Discussion threads
      match /threads/{threadId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null 
          && resource.data.authorId == request.auth.uid;
        allow delete: if request.auth != null 
          && resource.data.authorId == request.auth.uid;
        
        // Thread replies
        match /replies/{replyId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null;
          allow update: if request.auth != null 
            && resource.data.authorId == request.auth.uid;
          allow delete: if request.auth != null 
            && resource.data.authorId == request.auth.uid;
        }
      }
    }
    
    // Calendar events - users can create/manage their own events, view if participants
    match /calendar_events/{eventId} {
      allow read: if request.auth != null 
        && (resource.data.createdBy == request.auth.uid 
          || request.auth.uid in resource.data.participantIds);
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
    }
    
    // Students collection - for student-specific data
    match /students/{studentId} {
      // Students can read their own data (by userId field), teacher can read all
      allow read: if request.auth != null && 
        (isTheTeacher() || 
         (isStudent() && (request.auth.uid == studentId || 
          request.auth.uid == resource.data.userId)));
      
      // Students can update their own profile data
      allow update: if isStudent() && 
        (request.auth.uid == studentId || request.auth.uid == resource.data.userId);
      
      // Only teacher can create or delete student records
      allow create, delete: if isTheTeacher();
    }
    
    // Teachers collection - for teacher-specific data
    match /teachers/{teacherId} {
      // Only the teacher can read/write their own data
      allow read, write: if isTheTeacher() && request.auth.uid == teacherId;
    }
    
    // Calls collection - for video/voice calls
    match /calls/{callId} {
      // Only participants can read call data
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.receiverId);
      
      // Only authenticated users can create calls where they are the caller
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.callerId;
      
      // Only participants can update call status
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.receiverId);
      
      // ICE candidates subcollection
      match /candidates/{userId}/candidates/{candidateId} {
        allow read, write: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId || 
           request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.receiverId);
      }
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // System or teacher can create notifications
      allow create: if request.auth != null && 
        (isTheTeacher() || 
         request.auth.uid == request.resource.data.userId);
      
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
  }
}